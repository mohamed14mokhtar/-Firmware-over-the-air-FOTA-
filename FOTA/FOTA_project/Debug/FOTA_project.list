
FOTA_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a00  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08003ba0  08003ba0  00004ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e00  08003e00  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e00  08003e00  00004e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e08  08003e08  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e08  08003e08  00004e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e0c  08003e0c  00004e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  08003e6c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08003e6c  000052c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bf1  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002240  00000000  00000000  0000ec7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00010ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006cd  00000000  00000000  000117d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a2d  00000000  00000000  00011ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd99  00000000  00000000  000288d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086178  00000000  00000000  0003666b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc7e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002788  00000000  00000000  000bc828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000befb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b88 	.word	0x08003b88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003b88 	.word	0x08003b88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BL_UART_Fetch_Host_Command>:


/* -----------------  Software Interfaces Definitions -----------------*/

uint8_t Data_Length = 0;
BL_Status BL_UART_Fetch_Host_Command(void){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	BL_Status Status = BL_NACK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	71bb      	strb	r3, [r7, #6]

	__HAL_UART_CLEAR_OREFLAG(BL_HOST_COMMUNICATION_UART);              // Clear overrun
 800057e:	2300      	movs	r3, #0
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	4b3d      	ldr	r3, [pc, #244]	@ (8000678 <BL_UART_Fetch_Host_Command+0x108>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b3b      	ldr	r3, [pc, #236]	@ (8000678 <BL_UART_Fetch_Host_Command+0x108>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]
	__HAL_UART_CLEAR_FLAG(BL_HOST_COMMUNICATION_UART, UART_FLAG_RXNE); // Clear RX buffer
 8000594:	4b38      	ldr	r3, [pc, #224]	@ (8000678 <BL_UART_Fetch_Host_Command+0x108>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f06f 0220 	mvn.w	r2, #32
 800059c:	601a      	str	r2, [r3, #0]
	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);               // set all value at array to 0
 800059e:	2247      	movs	r2, #71	@ 0x47
 80005a0:	2100      	movs	r1, #0
 80005a2:	4836      	ldr	r0, [pc, #216]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 80005a4:	f002 fe70 	bl	8003288 <memset>
	/* Read the length of the command packet received from the HOST */
	//first byte receive should be one of this values
	while(!((BL_Host_Buffer[0] == 71) || (BL_Host_Buffer[0] == 6) || (BL_Host_Buffer[0] == 4))){
 80005a8:	e008      	b.n	80005bc <BL_UART_Fetch_Host_Command+0x4c>
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2201      	movs	r2, #1
 80005b0:	4932      	ldr	r1, [pc, #200]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 80005b2:	4831      	ldr	r0, [pc, #196]	@ (8000678 <BL_UART_Fetch_Host_Command+0x108>)
 80005b4:	f002 fa81 	bl	8002aba <HAL_UART_Receive>
 80005b8:	4603      	mov	r3, r0
 80005ba:	71bb      	strb	r3, [r7, #6]
	while(!((BL_Host_Buffer[0] == 71) || (BL_Host_Buffer[0] == 6) || (BL_Host_Buffer[0] == 4))){
 80005bc:	4b2f      	ldr	r3, [pc, #188]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b47      	cmp	r3, #71	@ 0x47
 80005c2:	d007      	beq.n	80005d4 <BL_UART_Fetch_Host_Command+0x64>
 80005c4:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b06      	cmp	r3, #6
 80005ca:	d003      	beq.n	80005d4 <BL_UART_Fetch_Host_Command+0x64>
 80005cc:	4b2b      	ldr	r3, [pc, #172]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d1ea      	bne.n	80005aa <BL_UART_Fetch_Host_Command+0x3a>

	}


	if(HAL_Status != HAL_OK){
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <BL_UART_Fetch_Host_Command+0x70>
		Status = BL_NACK;
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	e045      	b.n	800066c <BL_UART_Fetch_Host_Command+0xfc>
	}
	else{
		Data_Length = BL_Host_Buffer[0];  //length of the packet
 80005e0:	4b26      	ldr	r3, [pc, #152]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <BL_UART_Fetch_Host_Command+0x110>)
 80005e6:	701a      	strb	r2, [r3, #0]
		/* Read the command packet received from the HOST */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], Data_Length-1, HAL_MAX_DELAY);
 80005e8:	4b25      	ldr	r3, [pc, #148]	@ (8000680 <BL_UART_Fetch_Host_Command+0x110>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	4923      	ldr	r1, [pc, #140]	@ (8000684 <BL_UART_Fetch_Host_Command+0x114>)
 80005f6:	4820      	ldr	r0, [pc, #128]	@ (8000678 <BL_UART_Fetch_Host_Command+0x108>)
 80005f8:	f002 fa5f 	bl	8002aba <HAL_UART_Receive>
 80005fc:	4603      	mov	r3, r0
 80005fe:	71bb      	strb	r3, [r7, #6]

		if(HAL_Status != HAL_OK){
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <BL_UART_Fetch_Host_Command+0x9c>
			Status = BL_NACK;
 8000606:	2300      	movs	r3, #0
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	e02f      	b.n	800066c <BL_UART_Fetch_Host_Command+0xfc>
		}
		else{
			switch(BL_Host_Buffer[1]){
 800060c:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	2b16      	cmp	r3, #22
 8000612:	d018      	beq.n	8000646 <BL_UART_Fetch_Host_Command+0xd6>
 8000614:	2b16      	cmp	r3, #22
 8000616:	dc1f      	bgt.n	8000658 <BL_UART_Fetch_Host_Command+0xe8>
 8000618:	2b14      	cmp	r3, #20
 800061a:	d002      	beq.n	8000622 <BL_UART_Fetch_Host_Command+0xb2>
 800061c:	2b15      	cmp	r3, #21
 800061e:	d009      	beq.n	8000634 <BL_UART_Fetch_Host_Command+0xc4>
 8000620:	e01a      	b.n	8000658 <BL_UART_Fetch_Host_Command+0xe8>
				case CBL_GO_TO_ADDR_CMD:
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
					BL_Print_Message("CBL_GO_TO_ADDR_CMD \r\n");
 8000622:	4819      	ldr	r0, [pc, #100]	@ (8000688 <BL_UART_Fetch_Host_Command+0x118>)
 8000624:	f000 f83a 	bl	800069c <BL_Print_Message>
#endif
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 8000628:	4814      	ldr	r0, [pc, #80]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 800062a:	f000 f85d 	bl	80006e8 <Bootloader_Jump_To_Address>
					Status = BL_OK;
 800062e:	2301      	movs	r3, #1
 8000630:	71fb      	strb	r3, [r7, #7]
					break;
 8000632:	e01b      	b.n	800066c <BL_UART_Fetch_Host_Command+0xfc>
				case CBL_FLASH_ERASE_CMD:
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
					BL_Print_Message("CBL_FLASH_ERASE_CMD \r\n");
 8000634:	4815      	ldr	r0, [pc, #84]	@ (800068c <BL_UART_Fetch_Host_Command+0x11c>)
 8000636:	f000 f831 	bl	800069c <BL_Print_Message>
#endif
					Bootloader_Erase_Flash(BL_Host_Buffer);
 800063a:	4810      	ldr	r0, [pc, #64]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 800063c:	f000 f916 	bl	800086c <Bootloader_Erase_Flash>
					Status = BL_OK;
 8000640:	2301      	movs	r3, #1
 8000642:	71fb      	strb	r3, [r7, #7]
					break;
 8000644:	e012      	b.n	800066c <BL_UART_Fetch_Host_Command+0xfc>
				case CBL_MEM_WRITE_CMD:
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
					BL_Print_Message("CBL_MEM_WRITE_CMD \r\n");
 8000646:	4812      	ldr	r0, [pc, #72]	@ (8000690 <BL_UART_Fetch_Host_Command+0x120>)
 8000648:	f000 f828 	bl	800069c <BL_Print_Message>
#endif
					Bootloader_Memory_Write(BL_Host_Buffer);
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 800064e:	f000 f99d 	bl	800098c <Bootloader_Memory_Write>
					Status = BL_OK;
 8000652:	2301      	movs	r3, #1
 8000654:	71fb      	strb	r3, [r7, #7]
					break;
 8000656:	e009      	b.n	800066c <BL_UART_Fetch_Host_Command+0xfc>
				default:
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
					BL_Print_Message("Invalid command code received from host !! \r\n");
 8000658:	480e      	ldr	r0, [pc, #56]	@ (8000694 <BL_UART_Fetch_Host_Command+0x124>)
 800065a:	f000 f81f 	bl	800069c <BL_Print_Message>
					BL_Print_Message("Received Command Code: 0x%02X\r\n", BL_Host_Buffer[1]);
 800065e:	4b07      	ldr	r3, [pc, #28]	@ (800067c <BL_UART_Fetch_Host_Command+0x10c>)
 8000660:	785b      	ldrb	r3, [r3, #1]
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <BL_UART_Fetch_Host_Command+0x128>)
 8000666:	f000 f819 	bl	800069c <BL_Print_Message>
					break;
 800066a:	bf00      	nop
#endif
			}
		}
	}

	return Status;
 800066c:	79fb      	ldrb	r3, [r7, #7]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000114 	.word	0x20000114
 800067c:	20000078 	.word	0x20000078
 8000680:	200000bf 	.word	0x200000bf
 8000684:	20000079 	.word	0x20000079
 8000688:	08003ba0 	.word	0x08003ba0
 800068c:	08003bb8 	.word	0x08003bb8
 8000690:	08003bd0 	.word	0x08003bd0
 8000694:	08003be8 	.word	0x08003be8
 8000698:	08003c18 	.word	0x08003c18

0800069c <BL_Print_Message>:

void BL_Print_Message(char *format, ...){
 800069c:	b40f      	push	{r0, r1, r2, r3}
 800069e:	b580      	push	{r7, lr}
 80006a0:	b09a      	sub	sp, #104	@ 0x68
 80006a2:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2260      	movs	r2, #96	@ 0x60
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fde9 	bl	8003288 <memset>
	/* holds the information needed by va_start, va_arg, va_end */
	va_list args;
	/* Enables access to the variable arguments */
	va_start(args, format);
 80006b6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80006ba:	603b      	str	r3, [r7, #0]
	/* Write formatted data from variable argument list to string */
	vsprintf(Messsage, format, args);
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fdd6 	bl	8003274 <vsiprintf>
#if (BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 80006c8:	1d39      	adds	r1, r7, #4
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	2264      	movs	r2, #100	@ 0x64
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <BL_Print_Message+0x48>)
 80006d2:	f002 f967 	bl	80029a4 <HAL_UART_Transmit>
#elif (BL_DEBUG_METHOD == BL_ENABLE_CAN_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined CAN */
#endif
	/* Performs cleanup for an ap object initialized by a call to va_start */
	va_end(args);
}
 80006d6:	bf00      	nop
 80006d8:	3768      	adds	r7, #104	@ 0x68
 80006da:	46bd      	mov	sp, r7
 80006dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006e0:	b004      	add	sp, #16
 80006e2:	4770      	bx	lr
 80006e4:	200000cc 	.word	0x200000cc

080006e8 <Bootloader_Jump_To_Address>:

/* ----------------- Static Functions Definitions -----------------*/

static void Bootloader_Jump_To_Address(uint8_t *Host_Buffer) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	@ 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    uint32_t HOST_Jump_Address = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t APP_MSP_Value = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
    uint32_t APP_Reset_Hndler_Addr = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

    uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80006fc:	2300      	movs	r3, #0
 80006fe:	76fb      	strb	r3, [r7, #27]

    HOST_Jump_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000706:	627b      	str	r3, [r7, #36]	@ 0x24

    Address_Verification = Host_Address_Verification(HOST_Jump_Address);
 8000708:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800070a:	f000 f9ad 	bl	8000a68 <Host_Address_Verification>
 800070e:	4603      	mov	r3, r0
 8000710:	76fb      	strb	r3, [r7, #27]

    if (ADDRESS_IS_VALID == Address_Verification) {
 8000712:	7efb      	ldrb	r3, [r7, #27]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d12b      	bne.n	8000770 <Bootloader_Jump_To_Address+0x88>
        Bootloader_Send_ACK(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 f98b 	bl	8000a34 <Bootloader_Send_ACK>

        // Extract stack pointer and reset handler from the vector table
        uint32_t APP_MSP_Value = *((uint32_t*)HOST_Jump_Address);         // MSP
 800071e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	617b      	str	r3, [r7, #20]
        uint32_t APP_Reset_Hndler_Addr = *((uint32_t*)(HOST_Jump_Address + 4)) | 1;     // Reset Handler with Thumb bit set
 8000724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000726:	3304      	adds	r3, #4
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	f383 8808 	msr	MSP, r3
}
 800073a:	bf00      	nop

        __set_MSP(APP_MSP_Value);  // Set MSP

        HAL_UART_DeInit(&huart2);
 800073c:	480e      	ldr	r0, [pc, #56]	@ (8000778 <Bootloader_Jump_To_Address+0x90>)
 800073e:	f002 f8ff 	bl	8002940 <HAL_UART_DeInit>
        HAL_UART_DeInit(&huart1);
 8000742:	480e      	ldr	r0, [pc, #56]	@ (800077c <Bootloader_Jump_To_Address+0x94>)
 8000744:	f002 f8fc 	bl	8002940 <HAL_UART_DeInit>
        HAL_RCC_DeInit();                //very important and should delete weak function
 8000748:	f001 ffdc 	bl	8002704 <HAL_RCC_DeInit>
        HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 800074c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000750:	480b      	ldr	r0, [pc, #44]	@ (8000780 <Bootloader_Jump_To_Address+0x98>)
 8000752:	f001 fa81 	bl	8001c58 <HAL_GPIO_DeInit>

        SysTick->CTRL = 0;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <Bootloader_Jump_To_Address+0x9c>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
        SysTick->LOAD = 0;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <Bootloader_Jump_To_Address+0x9c>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
        SysTick->VAL  = 0;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <Bootloader_Jump_To_Address+0x9c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]

        // Jump to application
        void (*AppResetHandler)(void) = (void (*)(void)) APP_Reset_Hndler_Addr;
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	60fb      	str	r3, [r7, #12]
        AppResetHandler();
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4798      	blx	r3
    }
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000114 	.word	0x20000114
 800077c:	200000cc 	.word	0x200000cc
 8000780:	40020800 	.word	0x40020800
 8000784:	e000e010 	.word	0xe000e010

08000788 <Perform_Flash_Erase>:




static uint8_t Perform_Flash_Erase(uint8_t Sector_Numebr, uint8_t Number_Of_Sectors){
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000798:	2300      	movs	r3, #0
 800079a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	FLASH_EraseInitTypeDef pEraseInit;
	uint8_t Remaining_Sectors = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint32_t SectorError = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER){
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	2b0c      	cmp	r3, #12
 80007b2:	d903      	bls.n	80007bc <Perform_Flash_Erase+0x34>
		/* Number Of sectors is out of range */
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80007ba:	e04c      	b.n	8000856 <Perform_Flash_Erase+0xce>
	}
	else{
		if((Sector_Numebr <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Numebr)){
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b0b      	cmp	r3, #11
 80007c0:	d902      	bls.n	80007c8 <Perform_Flash_Erase+0x40>
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2bff      	cmp	r3, #255	@ 0xff
 80007c6:	d143      	bne.n	8000850 <Perform_Flash_Erase+0xc8>
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Numebr){
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2bff      	cmp	r3, #255	@ 0xff
 80007cc:	d105      	bne.n	80007da <Perform_Flash_Erase+0x52>
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 80007ce:	2301      	movs	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("Flash Mass erase activation \r\n");
 80007d2:	4824      	ldr	r0, [pc, #144]	@ (8000864 <Perform_Flash_Erase+0xdc>)
 80007d4:	f7ff ff62 	bl	800069c <BL_Print_Message>
 80007d8:	e015      	b.n	8000806 <Perform_Flash_Erase+0x7e>
#endif
			}
			else{
				/* User needs Sector erase */
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("User needs Sector erase \r\n");
 80007da:	4823      	ldr	r0, [pc, #140]	@ (8000868 <Perform_Flash_Erase+0xe0>)
 80007dc:	f7ff ff5e 	bl	800069c <BL_Print_Message>
#endif
				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Numebr;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	f1c3 030c 	rsb	r3, r3, #12
 80007e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if(Number_Of_Sectors > Remaining_Sectors){
 80007ea:	79ba      	ldrb	r2, [r7, #6]
 80007ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d902      	bls.n	80007fa <Perform_Flash_Erase+0x72>
					Number_Of_Sectors = Remaining_Sectors;
 80007f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80007f8:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }

				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Numebr;        /* Initial FLASH sector to erase when Mass erase is disabled */
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 8000802:	79bb      	ldrb	r3, [r7, #6]
 8000804:	61fb      	str	r3, [r7, #28]
			}

			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 8000806:	2301      	movs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 800080a:	2302      	movs	r3, #2
 800080c:	623b      	str	r3, [r7, #32]

			/* Unlock the FLASH control register access */
            HAL_Status = HAL_FLASH_Unlock();
 800080e:	f000 fe0b 	bl	8001428 <HAL_FLASH_Unlock>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000818:	f107 020c 	add.w	r2, r7, #12
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f000 ff72 	bl	800170c <HAL_FLASHEx_Erase>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if(HAL_SUCCESSFUL_ERASE == SectorError){
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000834:	d103      	bne.n	800083e <Perform_Flash_Erase+0xb6>
				Sector_Validity_Status = SUCCESSFUL_ERASE;
 8000836:	2303      	movs	r3, #3
 8000838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800083c:	e002      	b.n	8000844 <Perform_Flash_Erase+0xbc>
			}
			else{
				Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 800083e:	2302      	movs	r3, #2
 8000840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			/* Locks the FLASH control register access */
      HAL_Status = HAL_FLASH_Lock();
 8000844:	f000 fe12 	bl	800146c <HAL_FLASH_Lock>
 8000848:	4603      	mov	r3, r0
 800084a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800084e:	e002      	b.n	8000856 <Perform_Flash_Erase+0xce>
		}
		else{
			Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000850:	2302      	movs	r3, #2
 8000852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}
	return Sector_Validity_Status;
 8000856:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800085a:	4618      	mov	r0, r3
 800085c:	3728      	adds	r7, #40	@ 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	08003c38 	.word	0x08003c38
 8000868:	08003c58 	.word	0x08003c58

0800086c <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash(uint8_t *Host_Buffer){
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	uint8_t Erase_Status = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Mass erase or sector erase of the user flash \r\n");
 8000878:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <Bootloader_Erase_Flash+0x54>)
 800087a:	f7ff ff0f 	bl	800069c <BL_Print_Message>
#endif
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 800087e:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <Bootloader_Erase_Flash+0x58>)
 8000880:	f7ff ff0c 	bl	800069c <BL_Print_Message>
#endif
		/* Send acknowledgement to the HOST */
		Bootloader_Send_ACK(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f000 f8d5 	bl	8000a34 <Bootloader_Send_ACK>
		/* Perform Mass erase or sector erase of the user flash */
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3302      	adds	r3, #2
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3303      	adds	r3, #3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	4610      	mov	r0, r2
 800089a:	f7ff ff75 	bl	8000788 <Perform_Flash_Erase>
 800089e:	4603      	mov	r3, r0
 80008a0:	73fb      	strb	r3, [r7, #15]
		if(SUCCESSFUL_ERASE == Erase_Status){
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d103      	bne.n	80008b0 <Bootloader_Erase_Flash+0x44>

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Successful Erase \r\n");
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <Bootloader_Erase_Flash+0x5c>)
 80008aa:	f7ff fef7 	bl	800069c <BL_Print_Message>
		else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Erase request failed !!\r\n");
#endif
		}
}
 80008ae:	e002      	b.n	80008b6 <Bootloader_Erase_Flash+0x4a>
			BL_Print_Message("Erase request failed !!\r\n");
 80008b0:	4806      	ldr	r0, [pc, #24]	@ (80008cc <Bootloader_Erase_Flash+0x60>)
 80008b2:	f7ff fef3 	bl	800069c <BL_Print_Message>
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	08003c74 	.word	0x08003c74
 80008c4:	08003ca4 	.word	0x08003ca4
 80008c8:	08003cc0 	.word	0x08003cc0
 80008cc:	08003cd4 	.word	0x08003cd4

080008d0 <Flash_Memory_Write_Payload>:


static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 80008d0:	b5b0      	push	{r4, r5, r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	4613      	mov	r3, r2
 80008dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	75fb      	strb	r3, [r7, #23]
    uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80008e2:	2300      	movs	r3, #0
 80008e4:	75bb      	strb	r3, [r7, #22]
    uint16_t Payload_Counter = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	82bb      	strh	r3, [r7, #20]

    /* Unlock the FLASH control register access */
    HAL_Status = HAL_FLASH_Unlock();
 80008ea:	f000 fd9d 	bl	8001428 <HAL_FLASH_Unlock>
 80008ee:	4603      	mov	r3, r0
 80008f0:	75fb      	strb	r3, [r7, #23]

    if(HAL_Status != HAL_OK){
 80008f2:	7dfb      	ldrb	r3, [r7, #23]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <Flash_Memory_Write_Payload+0x34>
        Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80008f8:	2300      	movs	r3, #0
 80008fa:	75bb      	strb	r3, [r7, #22]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
        BL_Print_Message("FLASH_PAYLOAD_WRITE_FAILED \r\n");
 80008fc:	4821      	ldr	r0, [pc, #132]	@ (8000984 <Flash_Memory_Write_Payload+0xb4>)
 80008fe:	f7ff fecd 	bl	800069c <BL_Print_Message>
 8000902:	e025      	b.n	8000950 <Flash_Memory_Write_Payload+0x80>
#endif
    }
    else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
        BL_Print_Message("FLASH_PAYLOAD_WRITE_PASS \r\n");
 8000904:	4820      	ldr	r0, [pc, #128]	@ (8000988 <Flash_Memory_Write_Payload+0xb8>)
 8000906:	f7ff fec9 	bl	800069c <BL_Print_Message>
#endif
        for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 4){  // Step by 4 to write 32-bit words
 800090a:	2300      	movs	r3, #0
 800090c:	82bb      	strh	r3, [r7, #20]
 800090e:	e01b      	b.n	8000948 <Flash_Memory_Write_Payload+0x78>

       	            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000910:	8aba      	ldrh	r2, [r7, #20]
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	18d1      	adds	r1, r2, r3
       	                                                       Payload_Start_Address + Payload_Counter,
															   *((uint32_t *)(Host_Payload + Payload_Counter)));
 8000916:	8abb      	ldrh	r3, [r7, #20]
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	681b      	ldr	r3, [r3, #0]
       	            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 800091e:	2200      	movs	r2, #0
 8000920:	461c      	mov	r4, r3
 8000922:	4615      	mov	r5, r2
 8000924:	4622      	mov	r2, r4
 8000926:	462b      	mov	r3, r5
 8000928:	2002      	movs	r0, #2
 800092a:	f000 fd29 	bl	8001380 <HAL_FLASH_Program>
 800092e:	4603      	mov	r3, r0
 8000930:	75fb      	strb	r3, [r7, #23]

            if(HAL_Status != HAL_OK){
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <Flash_Memory_Write_Payload+0x6e>
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000938:	2300      	movs	r3, #0
 800093a:	75bb      	strb	r3, [r7, #22]
                break;
 800093c:	e008      	b.n	8000950 <Flash_Memory_Write_Payload+0x80>
            }
            else{
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 800093e:	2301      	movs	r3, #1
 8000940:	75bb      	strb	r3, [r7, #22]
        for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 4){  // Step by 4 to write 32-bit words
 8000942:	8abb      	ldrh	r3, [r7, #20]
 8000944:	3304      	adds	r3, #4
 8000946:	82bb      	strh	r3, [r7, #20]
 8000948:	8aba      	ldrh	r2, [r7, #20]
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	429a      	cmp	r2, r3
 800094e:	d3df      	bcc.n	8000910 <Flash_Memory_Write_Payload+0x40>
            }
        }
    }

    if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000950:	7dbb      	ldrb	r3, [r7, #22]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d10f      	bne.n	8000976 <Flash_Memory_Write_Payload+0xa6>
 8000956:	7dfb      	ldrb	r3, [r7, #23]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d10c      	bne.n	8000976 <Flash_Memory_Write_Payload+0xa6>
        /* Locks the FLASH control register access */
        HAL_Status = HAL_FLASH_Lock();
 800095c:	f000 fd86 	bl	800146c <HAL_FLASH_Lock>
 8000960:	4603      	mov	r3, r0
 8000962:	75fb      	strb	r3, [r7, #23]
        if(HAL_Status != HAL_OK){
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <Flash_Memory_Write_Payload+0xa0>
            Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800096a:	2300      	movs	r3, #0
 800096c:	75bb      	strb	r3, [r7, #22]
        if(HAL_Status != HAL_OK){
 800096e:	e004      	b.n	800097a <Flash_Memory_Write_Payload+0xaa>
        }
        else{
            Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000970:	2301      	movs	r3, #1
 8000972:	75bb      	strb	r3, [r7, #22]
        if(HAL_Status != HAL_OK){
 8000974:	e001      	b.n	800097a <Flash_Memory_Write_Payload+0xaa>
        }
    }
    else{
        Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000976:	2300      	movs	r3, #0
 8000978:	75bb      	strb	r3, [r7, #22]
    }

    return Flash_Payload_Write_Status;
 800097a:	7dbb      	ldrb	r3, [r7, #22]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bdb0      	pop	{r4, r5, r7, pc}
 8000984:	08003cf0 	.word	0x08003cf0
 8000988:	08003d10 	.word	0x08003d10

0800098c <Bootloader_Memory_Write>:


static void Bootloader_Memory_Write(uint8_t *Host_Buffer){
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	82fb      	strh	r3, [r7, #22]
	uint32_t HOST_Address = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
	uint8_t Payload_Len = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73bb      	strb	r3, [r7, #14]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80009a4:	2300      	movs	r3, #0
 80009a6:	737b      	strb	r3, [r7, #13]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Write data into different memories of the MCU \r\n");
 80009a8:	481d      	ldr	r0, [pc, #116]	@ (8000a20 <Bootloader_Memory_Write+0x94>)
 80009aa:	f7ff fe77 	bl	800069c <BL_Print_Message>
#endif
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	82fb      	strh	r3, [r7, #22]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 80009b6:	481b      	ldr	r0, [pc, #108]	@ (8000a24 <Bootloader_Memory_Write+0x98>)
 80009b8:	f7ff fe70 	bl	800069c <BL_Print_Message>
#endif
		/* Send acknowledgement to the HOST */

		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80009c2:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("HOST_Address = 0x%X \r\n", HOST_Address);
 80009c4:	6939      	ldr	r1, [r7, #16]
 80009c6:	4818      	ldr	r0, [pc, #96]	@ (8000a28 <Bootloader_Memory_Write+0x9c>)
 80009c8:	f7ff fe68 	bl	800069c <BL_Print_Message>
#endif
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	799b      	ldrb	r3, [r3, #6]
 80009d0:	73fb      	strb	r3, [r7, #15]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 80009d2:	6938      	ldr	r0, [r7, #16]
 80009d4:	f000 f848 	bl	8000a68 <Host_Address_Verification>
 80009d8:	4603      	mov	r3, r0
 80009da:	73bb      	strb	r3, [r7, #14]
		if(ADDRESS_IS_VALID == Address_Verification){
 80009dc:	7bbb      	ldrb	r3, [r7, #14]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d117      	bne.n	8000a12 <Bootloader_Memory_Write+0x86>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3307      	adds	r3, #7
 80009e6:	7bfa      	ldrb	r2, [r7, #15]
 80009e8:	b292      	uxth	r2, r2
 80009ea:	6939      	ldr	r1, [r7, #16]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff6f 	bl	80008d0 <Flash_Memory_Write_Payload>
 80009f2:	4603      	mov	r3, r0
 80009f4:	737b      	strb	r3, [r7, #13]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 80009f6:	7b7b      	ldrb	r3, [r7, #13]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d106      	bne.n	8000a0a <Bootloader_Memory_Write+0x7e>
				/* Report payload write passed */
				Bootloader_Send_ACK(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 f819 	bl	8000a34 <Bootloader_Send_ACK>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("Payload Valid \r\n");
 8000a02:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <Bootloader_Memory_Write+0xa0>)
 8000a04:	f7ff fe4a 	bl	800069c <BL_Print_Message>
		else{
			/* Report address verification failed */
			Address_Verification = ADDRESS_IS_INVALID;
		}

}
 8000a08:	e005      	b.n	8000a16 <Bootloader_Memory_Write+0x8a>
				BL_Print_Message("Payload InValid \r\n");
 8000a0a:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <Bootloader_Memory_Write+0xa4>)
 8000a0c:	f7ff fe46 	bl	800069c <BL_Print_Message>
}
 8000a10:	e001      	b.n	8000a16 <Bootloader_Memory_Write+0x8a>
			Address_Verification = ADDRESS_IS_INVALID;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73bb      	strb	r3, [r7, #14]
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08003d2c 	.word	0x08003d2c
 8000a24:	08003ca4 	.word	0x08003ca4
 8000a28:	08003d60 	.word	0x08003d60
 8000a2c:	08003d78 	.word	0x08003d78
 8000a30:	08003d8c 	.word	0x08003d8c

08000a34 <Bootloader_Send_ACK>:
	}

	return CRC_Status;
}

static void Bootloader_Send_ACK(uint8_t Replay_Len){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Value[2] = {0};
 8000a3e:	2300      	movs	r3, #0
 8000a40:	81bb      	strh	r3, [r7, #12]
	Ack_Value[0] = CBL_SEND_ACK;
 8000a42:	23cd      	movs	r3, #205	@ 0xcd
 8000a44:	733b      	strb	r3, [r7, #12]
	Ack_Value[1] = Replay_Len;
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, (uint8_t *)Ack_Value, 2, HAL_MAX_DELAY);
 8000a4a:	f107 010c 	add.w	r1, r7, #12
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	2202      	movs	r2, #2
 8000a54:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <Bootloader_Send_ACK+0x30>)
 8000a56:	f001 ffa5 	bl	80029a4 <HAL_UART_Transmit>
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000114 	.word	0x20000114

08000a68 <Host_Address_Verification>:
	uint8_t Ack_Value = CBL_SEND_NACK;
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
}


static uint8_t Host_Address_Verification(uint32_t Jump_Address){
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F407_SRAM1_END)){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a7a:	d306      	bcc.n	8000a8a <Host_Address_Verification+0x22>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <Host_Address_Verification+0x4c>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d802      	bhi.n	8000a8a <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e00c      	b.n	8000aa4 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F407_FLASH_END)){
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000a90:	d306      	bcc.n	8000aa0 <Host_Address_Verification+0x38>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8000a98:	d802      	bhi.n	8000aa0 <Host_Address_Verification+0x38>
		Address_Verification = ADDRESS_IS_VALID;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e001      	b.n	8000aa4 <Host_Address_Verification+0x3c>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20010000 	.word	0x20010000

08000ab8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_CRC_Init+0x20>)
 8000abe:	4a07      	ldr	r2, [pc, #28]	@ (8000adc <MX_CRC_Init+0x24>)
 8000ac0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_CRC_Init+0x20>)
 8000ac4:	f000 fc3f 	bl	8001346 <HAL_CRC_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ace:	f000 f913 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000c0 	.word	0x200000c0
 8000adc:	40023000 	.word	0x40023000

08000ae0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0b      	ldr	r2, [pc, #44]	@ (8000b1c <HAL_CRC_MspInit+0x3c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10d      	bne.n	8000b0e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <HAL_CRC_MspInit+0x40>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a09      	ldr	r2, [pc, #36]	@ (8000b20 <HAL_CRC_MspInit+0x40>)
 8000afc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <HAL_CRC_MspInit+0x40>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023000 	.word	0x40023000
 8000b20:	40023800 	.word	0x40023800

08000b24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <MX_GPIO_Init+0xbc>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a27      	ldr	r2, [pc, #156]	@ (8000be0 <MX_GPIO_Init+0xbc>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <MX_GPIO_Init+0xbc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <MX_GPIO_Init+0xbc>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a20      	ldr	r2, [pc, #128]	@ (8000be0 <MX_GPIO_Init+0xbc>)
 8000b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <MX_GPIO_Init+0xbc>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_GPIO_Init+0xbc>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a19      	ldr	r2, [pc, #100]	@ (8000be0 <MX_GPIO_Init+0xbc>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_GPIO_Init+0xbc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000b94:	4813      	ldr	r0, [pc, #76]	@ (8000be4 <MX_GPIO_Init+0xc0>)
 8000b96:	f001 f943 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <MX_GPIO_Init+0xc0>)
 8000bb4:	f000 fecc 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <MX_GPIO_Init+0xc0>)
 8000bd2:	f000 febd 	bl	8001950 <HAL_GPIO_Init>

}
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020800 	.word	0x40020800

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f000 fa54 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f818 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f7ff ff96 	bl	8000b24 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bf8:	f000 f924 	bl	8000e44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bfc:	f000 f94c 	bl	8000e98 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000c00:	f7ff ff5a 	bl	8000ab8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0a:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <main+0x34>)
 8000c0c:	f001 f908 	bl	8001e20 <HAL_GPIO_WritePin>
  BL_Print_Message("hello boodloader");
 8000c10:	4803      	ldr	r0, [pc, #12]	@ (8000c20 <main+0x38>)
 8000c12:	f7ff fd43 	bl	800069c <BL_Print_Message>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BL_UART_Fetch_Host_Command();
 8000c16:	f7ff fcab 	bl	8000570 <BL_UART_Fetch_Host_Command>
 8000c1a:	e7fc      	b.n	8000c16 <main+0x2e>
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	08003da0 	.word	0x08003da0

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	@ 0x50
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0320 	add.w	r3, r7, #32
 8000c2e:	2230      	movs	r2, #48	@ 0x30
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fb28 	bl	8003288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <SystemClock_Config+0xcc>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	4a27      	ldr	r2, [pc, #156]	@ (8000cf0 <SystemClock_Config+0xcc>)
 8000c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c58:	4b25      	ldr	r3, [pc, #148]	@ (8000cf0 <SystemClock_Config+0xcc>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <SystemClock_Config+0xd0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c70:	4a20      	ldr	r2, [pc, #128]	@ (8000cf4 <SystemClock_Config+0xd0>)
 8000c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <SystemClock_Config+0xd0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c98:	2319      	movs	r3, #25
 8000c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c9c:	23a8      	movs	r3, #168	@ 0xa8
 8000c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 0320 	add.w	r3, r7, #32
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 f8d1 	bl	8001e54 <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cb8:	f000 f81e 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ccc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fb33 	bl	8002344 <HAL_RCC_ClockConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ce4:	f000 f808 	bl	8000cf8 <Error_Handler>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3750      	adds	r7, #80	@ 0x50
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <NMI_Handler+0x4>

08000d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000daa:	f000 f9c7 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f002 fa58 	bl	8003298 <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20010000 	.word	0x20010000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	200000c8 	.word	0x200000c8
 8000e1c:	200002c8 	.word	0x200002c8

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <MX_USART1_UART_Init+0x50>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e7c:	f001 fd10 	bl	80028a0 <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e86:	f7ff ff37 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000cc 	.word	0x200000cc
 8000e94:	40011000 	.word	0x40011000

08000e98 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <MX_USART2_UART_Init+0x50>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	f001 fce6 	bl	80028a0 <HAL_UART_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eda:	f7ff ff0d 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000114 	.word	0x20000114
 8000ee8:	40004400 	.word	0x40004400

08000eec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	@ 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a32      	ldr	r2, [pc, #200]	@ (8000fd4 <HAL_UART_MspInit+0xe8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12d      	bne.n	8000f6a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	4b31      	ldr	r3, [pc, #196]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a30      	ldr	r2, [pc, #192]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f003 0310 	and.w	r3, r3, #16
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a29      	ldr	r2, [pc, #164]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	481e      	ldr	r0, [pc, #120]	@ (8000fdc <HAL_UART_MspInit+0xf0>)
 8000f64:	f000 fcf4 	bl	8001950 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f68:	e030      	b.n	8000fcc <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe0 <HAL_UART_MspInit+0xf4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d12b      	bne.n	8000fcc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	4a16      	ldr	r2, [pc, #88]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f98:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <HAL_UART_MspInit+0xec>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fac:	230c      	movs	r3, #12
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <HAL_UART_MspInit+0xf0>)
 8000fc8:	f000 fcc2 	bl	8001950 <HAL_GPIO_Init>
}
 8000fcc:	bf00      	nop
 8000fce:	3730      	adds	r7, #48	@ 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40011000 	.word	0x40011000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40004400 	.word	0x40004400

08000fe4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a10      	ldr	r2, [pc, #64]	@ (8001034 <HAL_UART_MspDeInit+0x50>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10b      	bne.n	800100e <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <HAL_UART_MspDeInit+0x54>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <HAL_UART_MspDeInit+0x54>)
 8000ffc:	f023 0310 	bic.w	r3, r3, #16
 8001000:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001002:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <HAL_UART_MspDeInit+0x58>)
 8001008:	f000 fe26 	bl	8001c58 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800100c:	e00e      	b.n	800102c <HAL_UART_MspDeInit+0x48>
  else if(uartHandle->Instance==USART2)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <HAL_UART_MspDeInit+0x5c>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d109      	bne.n	800102c <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <HAL_UART_MspDeInit+0x54>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <HAL_UART_MspDeInit+0x54>)
 800101e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001022:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001024:	210c      	movs	r1, #12
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <HAL_UART_MspDeInit+0x58>)
 8001028:	f000 fe16 	bl	8001c58 <HAL_GPIO_DeInit>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40011000 	.word	0x40011000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	40004400 	.word	0x40004400

08001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800107c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001048:	f7ff feea 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480c      	ldr	r0, [pc, #48]	@ (8001080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800104e:	490d      	ldr	r1, [pc, #52]	@ (8001084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001064:	4c0a      	ldr	r4, [pc, #40]	@ (8001090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001072:	f002 f917 	bl	80032a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001076:	f7ff fdb7 	bl	8000be8 <main>
  bx  lr    
 800107a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001088:	08003e10 	.word	0x08003e10
  ldr r2, =_sbss
 800108c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001090:	200002c8 	.word	0x200002c8

08001094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <HAL_Init+0x40>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <HAL_Init+0x40>)
 80010ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_Init+0x40>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 f90d 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	200f      	movs	r0, #15
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff fe1a 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023c00 	.word	0x40023c00

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f917 	bl	800132e <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f8ed 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008
 8001160:	2000015c 	.word	0x2000015c

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000015c 	.word	0x2000015c

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	@ (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	@ (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	@ 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff47 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff5c 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff8e 	bl	8001234 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5d 	bl	80011e0 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffb0 	bl	800129c <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e00e      	b.n	8001376 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	795b      	ldrb	r3, [r3, #5]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d105      	bne.n	800136e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fbb9 	bl	8000ae0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001392:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <HAL_FLASH_Program+0xa0>)
 8001394:	7e1b      	ldrb	r3, [r3, #24]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_FLASH_Program+0x1e>
 800139a:	2302      	movs	r3, #2
 800139c:	e03b      	b.n	8001416 <HAL_FLASH_Program+0x96>
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <HAL_FLASH_Program+0xa0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013a8:	f000 f870 	bl	800148c <FLASH_WaitForLastOperation>
 80013ac:	4603      	mov	r3, r0
 80013ae:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80013b0:	7dfb      	ldrb	r3, [r7, #23]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d12b      	bne.n	800140e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80013bc:	783b      	ldrb	r3, [r7, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	68b8      	ldr	r0, [r7, #8]
 80013c2:	f000 f91b 	bl	80015fc <FLASH_Program_Byte>
 80013c6:	e016      	b.n	80013f6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d105      	bne.n	80013da <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80013ce:	883b      	ldrh	r3, [r7, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	68b8      	ldr	r0, [r7, #8]
 80013d4:	f000 f8ee 	bl	80015b4 <FLASH_Program_HalfWord>
 80013d8:	e00d      	b.n	80013f6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d105      	bne.n	80013ec <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	68b8      	ldr	r0, [r7, #8]
 80013e6:	f000 f8c3 	bl	8001570 <FLASH_Program_Word>
 80013ea:	e004      	b.n	80013f6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80013ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f000 f88b 	bl	800150c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013f6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013fa:	f000 f847 	bl	800148c <FLASH_WaitForLastOperation>
 80013fe:	4603      	mov	r3, r0
 8001400:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_FLASH_Program+0xa4>)
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	4a07      	ldr	r2, [pc, #28]	@ (8001424 <HAL_FLASH_Program+0xa4>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <HAL_FLASH_Program+0xa0>)
 8001410:	2200      	movs	r2, #0
 8001412:	761a      	strb	r2, [r3, #24]

  return status;
 8001414:	7dfb      	ldrb	r3, [r7, #23]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000160 	.word	0x20000160
 8001424:	40023c00 	.word	0x40023c00

08001428 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <HAL_FLASH_Unlock+0x38>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	da0b      	bge.n	8001452 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_FLASH_Unlock+0x38>)
 800143c:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <HAL_FLASH_Unlock+0x3c>)
 800143e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001440:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <HAL_FLASH_Unlock+0x38>)
 8001442:	4a09      	ldr	r2, [pc, #36]	@ (8001468 <HAL_FLASH_Unlock+0x40>)
 8001444:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_FLASH_Unlock+0x38>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	2b00      	cmp	r3, #0
 800144c:	da01      	bge.n	8001452 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001452:	79fb      	ldrb	r3, [r7, #7]
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40023c00 	.word	0x40023c00
 8001464:	45670123 	.word	0x45670123
 8001468:	cdef89ab 	.word	0xcdef89ab

0800146c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_FLASH_Lock+0x1c>)
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <HAL_FLASH_Lock+0x1c>)
 8001476:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800147a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40023c00 	.word	0x40023c00

0800148c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <FLASH_WaitForLastOperation+0x78>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800149e:	f7ff fe61 	bl	8001164 <HAL_GetTick>
 80014a2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80014a4:	e010      	b.n	80014c8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d00c      	beq.n	80014c8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d007      	beq.n	80014c4 <FLASH_WaitForLastOperation+0x38>
 80014b4:	f7ff fe56 	bl	8001164 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d201      	bcs.n	80014c8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e019      	b.n	80014fc <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <FLASH_WaitForLastOperation+0x7c>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e8      	bne.n	80014a6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <FLASH_WaitForLastOperation+0x7c>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <FLASH_WaitForLastOperation+0x7c>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <FLASH_WaitForLastOperation+0x7c>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80014f2:	f000 f8a5 	bl	8001640 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0

}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000160 	.word	0x20000160
 8001508:	40023c00 	.word	0x40023c00

0800150c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <FLASH_Program_DoubleWord+0x60>)
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	4a13      	ldr	r2, [pc, #76]	@ (800156c <FLASH_Program_DoubleWord+0x60>)
 800151e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001522:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <FLASH_Program_DoubleWord+0x60>)
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	4a10      	ldr	r2, [pc, #64]	@ (800156c <FLASH_Program_DoubleWord+0x60>)
 800152a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800152e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001530:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <FLASH_Program_DoubleWord+0x60>)
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <FLASH_Program_DoubleWord+0x60>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	000a      	movs	r2, r1
 8001556:	2300      	movs	r3, #0
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	3104      	adds	r1, #4
 800155c:	4613      	mov	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40023c00 	.word	0x40023c00

08001570 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <FLASH_Program_Word+0x40>)
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	4a0c      	ldr	r2, [pc, #48]	@ (80015b0 <FLASH_Program_Word+0x40>)
 8001580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001584:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <FLASH_Program_Word+0x40>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	4a09      	ldr	r2, [pc, #36]	@ (80015b0 <FLASH_Program_Word+0x40>)
 800158c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001590:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001592:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <FLASH_Program_Word+0x40>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	4a06      	ldr	r2, [pc, #24]	@ (80015b0 <FLASH_Program_Word+0x40>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015c0:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <FLASH_Program_HalfWord+0x44>)
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	4a0c      	ldr	r2, [pc, #48]	@ (80015f8 <FLASH_Program_HalfWord+0x44>)
 80015c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <FLASH_Program_HalfWord+0x44>)
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	4a09      	ldr	r2, [pc, #36]	@ (80015f8 <FLASH_Program_HalfWord+0x44>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <FLASH_Program_HalfWord+0x44>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <FLASH_Program_HalfWord+0x44>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	801a      	strh	r2, [r3, #0]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <FLASH_Program_Byte+0x40>)
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4a0b      	ldr	r2, [pc, #44]	@ (800163c <FLASH_Program_Byte+0x40>)
 800160e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001612:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <FLASH_Program_Byte+0x40>)
 8001616:	4a09      	ldr	r2, [pc, #36]	@ (800163c <FLASH_Program_Byte+0x40>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800161c:	4b07      	ldr	r3, [pc, #28]	@ (800163c <FLASH_Program_Byte+0x40>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a06      	ldr	r2, [pc, #24]	@ (800163c <FLASH_Program_Byte+0x40>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	701a      	strb	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00

08001640 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001644:	4b2f      	ldr	r3, [pc, #188]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001650:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	f043 0310 	orr.w	r3, r3, #16
 8001658:	4a2b      	ldr	r2, [pc, #172]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 800165a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800165c:	4b29      	ldr	r3, [pc, #164]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 800165e:	2210      	movs	r2, #16
 8001660:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001662:	4b28      	ldr	r3, [pc, #160]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800166e:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	4a24      	ldr	r2, [pc, #144]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 8001678:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800167a:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 800167c:	2220      	movs	r2, #32
 800167e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	4a1c      	ldr	r2, [pc, #112]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 8001696:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001698:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 800169a:	2240      	movs	r2, #64	@ 0x40
 800169c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800169e:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 80016b4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 80016b8:	2280      	movs	r2, #128	@ 0x80
 80016ba:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d009      	beq.n	80016dc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 80016d2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 80016d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016da:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	f043 0320 	orr.w	r3, r3, #32
 80016f0:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <FLASH_SetErrorCode+0xc8>)
 80016f2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <FLASH_SetErrorCode+0xc4>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	60da      	str	r2, [r3, #12]
  }
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40023c00 	.word	0x40023c00
 8001708:	20000160 	.word	0x20000160

0800170c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800171e:	4b31      	ldr	r3, [pc, #196]	@ (80017e4 <HAL_FLASHEx_Erase+0xd8>)
 8001720:	7e1b      	ldrb	r3, [r3, #24]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_FLASHEx_Erase+0x1e>
 8001726:	2302      	movs	r3, #2
 8001728:	e058      	b.n	80017dc <HAL_FLASHEx_Erase+0xd0>
 800172a:	4b2e      	ldr	r3, [pc, #184]	@ (80017e4 <HAL_FLASHEx_Erase+0xd8>)
 800172c:	2201      	movs	r2, #1
 800172e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001730:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001734:	f7ff feaa 	bl	800148c <FLASH_WaitForLastOperation>
 8001738:	4603      	mov	r3, r0
 800173a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d148      	bne.n	80017d4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d115      	bne.n	800177e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4619      	mov	r1, r3
 800175e:	4610      	mov	r0, r2
 8001760:	f000 f844 	bl	80017ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001764:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001768:	f7ff fe90 	bl	800148c <FLASH_WaitForLastOperation>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001770:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <HAL_FLASHEx_Erase+0xdc>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	4a1c      	ldr	r2, [pc, #112]	@ (80017e8 <HAL_FLASHEx_Erase+0xdc>)
 8001776:	f023 0304 	bic.w	r3, r3, #4
 800177a:	6113      	str	r3, [r2, #16]
 800177c:	e028      	b.n	80017d0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	e01c      	b.n	80017c0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4619      	mov	r1, r3
 800178e:	68b8      	ldr	r0, [r7, #8]
 8001790:	f000 f850 	bl	8001834 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001794:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001798:	f7ff fe78 	bl	800148c <FLASH_WaitForLastOperation>
 800179c:	4603      	mov	r3, r0
 800179e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <HAL_FLASHEx_Erase+0xdc>)
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4a10      	ldr	r2, [pc, #64]	@ (80017e8 <HAL_FLASHEx_Erase+0xdc>)
 80017a6:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80017aa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	601a      	str	r2, [r3, #0]
          break;
 80017b8:	e00a      	b.n	80017d0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d3da      	bcc.n	8001786 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80017d0:	f000 f878 	bl	80018c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_FLASHEx_Erase+0xd8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	761a      	strb	r2, [r3, #24]

  return status;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000160 	.word	0x20000160
 80017e8:	40023c00 	.word	0x40023c00

080017ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <FLASH_MassErase+0x44>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001830 <FLASH_MassErase+0x44>)
 80017fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001802:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <FLASH_MassErase+0x44>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a09      	ldr	r2, [pc, #36]	@ (8001830 <FLASH_MassErase+0x44>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <FLASH_MassErase+0x44>)
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	4313      	orrs	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <FLASH_MassErase+0x44>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001820:	6113      	str	r3, [r2, #16]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	e010      	b.n	8001872 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d103      	bne.n	800185e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e009      	b.n	8001872 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d103      	bne.n	800186c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001864:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e002      	b.n	8001872 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800186c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001870:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <FLASH_Erase_Sector+0x8c>)
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	4a12      	ldr	r2, [pc, #72]	@ (80018c0 <FLASH_Erase_Sector+0x8c>)
 8001878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800187c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <FLASH_Erase_Sector+0x8c>)
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	490f      	ldr	r1, [pc, #60]	@ (80018c0 <FLASH_Erase_Sector+0x8c>)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <FLASH_Erase_Sector+0x8c>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <FLASH_Erase_Sector+0x8c>)
 8001890:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001894:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <FLASH_Erase_Sector+0x8c>)
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4313      	orrs	r3, r2
 80018a0:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <FLASH_Erase_Sector+0x8c>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <FLASH_Erase_Sector+0x8c>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <FLASH_Erase_Sector+0x8c>)
 80018ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b2:	6113      	str	r3, [r2, #16]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80018c8:	4b20      	ldr	r3, [pc, #128]	@ (800194c <FLASH_FlushCaches+0x88>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d017      	beq.n	8001904 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80018d4:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <FLASH_FlushCaches+0x88>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1c      	ldr	r2, [pc, #112]	@ (800194c <FLASH_FlushCaches+0x88>)
 80018da:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80018de:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <FLASH_FlushCaches+0x88>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a19      	ldr	r2, [pc, #100]	@ (800194c <FLASH_FlushCaches+0x88>)
 80018e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <FLASH_FlushCaches+0x88>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a16      	ldr	r2, [pc, #88]	@ (800194c <FLASH_FlushCaches+0x88>)
 80018f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80018f6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <FLASH_FlushCaches+0x88>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a13      	ldr	r2, [pc, #76]	@ (800194c <FLASH_FlushCaches+0x88>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001902:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <FLASH_FlushCaches+0x88>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d017      	beq.n	8001940 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001910:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <FLASH_FlushCaches+0x88>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <FLASH_FlushCaches+0x88>)
 8001916:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800191a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <FLASH_FlushCaches+0x88>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <FLASH_FlushCaches+0x88>)
 8001922:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <FLASH_FlushCaches+0x88>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a07      	ldr	r2, [pc, #28]	@ (800194c <FLASH_FlushCaches+0x88>)
 800192e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001932:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <FLASH_FlushCaches+0x88>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <FLASH_FlushCaches+0x88>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193e:	6013      	str	r3, [r2, #0]
  }
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	@ 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e159      	b.n	8001c20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 8148 	bne.w	8001c1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80a2 	beq.w	8001c1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b57      	ldr	r3, [pc, #348]	@ (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	4a56      	ldr	r2, [pc, #344]	@ (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae6:	4b54      	ldr	r3, [pc, #336]	@ (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a52      	ldr	r2, [pc, #328]	@ (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a49      	ldr	r2, [pc, #292]	@ (8001c40 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0x202>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a48      	ldr	r2, [pc, #288]	@ (8001c44 <HAL_GPIO_Init+0x2f4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0x1fe>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a47      	ldr	r2, [pc, #284]	@ (8001c48 <HAL_GPIO_Init+0x2f8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a46      	ldr	r2, [pc, #280]	@ (8001c4c <HAL_GPIO_Init+0x2fc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x1f6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a45      	ldr	r2, [pc, #276]	@ (8001c50 <HAL_GPIO_Init+0x300>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_Init+0x1f2>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e008      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b42:	2307      	movs	r3, #7
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b46:	2303      	movs	r3, #3
 8001b48:	e004      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b52:	2300      	movs	r3, #0
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	f002 0203 	and.w	r2, r2, #3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b64:	4935      	ldr	r1, [pc, #212]	@ (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b72:	4b38      	ldr	r3, [pc, #224]	@ (8001c54 <HAL_GPIO_Init+0x304>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b96:	4a2f      	ldr	r2, [pc, #188]	@ (8001c54 <HAL_GPIO_Init+0x304>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c54 <HAL_GPIO_Init+0x304>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc0:	4a24      	ldr	r2, [pc, #144]	@ (8001c54 <HAL_GPIO_Init+0x304>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc6:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <HAL_GPIO_Init+0x304>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bea:	4a1a      	ldr	r2, [pc, #104]	@ (8001c54 <HAL_GPIO_Init+0x304>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <HAL_GPIO_Init+0x304>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c14:	4a0f      	ldr	r2, [pc, #60]	@ (8001c54 <HAL_GPIO_Init+0x304>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b0f      	cmp	r3, #15
 8001c24:	f67f aea2 	bls.w	800196c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3724      	adds	r7, #36	@ 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40013800 	.word	0x40013800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40013c00 	.word	0x40013c00

08001c58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e0bb      	b.n	8001dec <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c74:	2201      	movs	r2, #1
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	f040 80ab 	bne.w	8001de6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c90:	4a5c      	ldr	r2, [pc, #368]	@ (8001e04 <HAL_GPIO_DeInit+0x1ac>)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a54      	ldr	r2, [pc, #336]	@ (8001e08 <HAL_GPIO_DeInit+0x1b0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d019      	beq.n	8001cee <HAL_GPIO_DeInit+0x96>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a53      	ldr	r2, [pc, #332]	@ (8001e0c <HAL_GPIO_DeInit+0x1b4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_DeInit+0x92>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a52      	ldr	r2, [pc, #328]	@ (8001e10 <HAL_GPIO_DeInit+0x1b8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_GPIO_DeInit+0x8e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a51      	ldr	r2, [pc, #324]	@ (8001e14 <HAL_GPIO_DeInit+0x1bc>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <HAL_GPIO_DeInit+0x8a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a50      	ldr	r2, [pc, #320]	@ (8001e18 <HAL_GPIO_DeInit+0x1c0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_GPIO_DeInit+0x86>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e008      	b.n	8001cf0 <HAL_GPIO_DeInit+0x98>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_DeInit+0x98>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_DeInit+0x98>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_DeInit+0x98>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_DeInit+0x98>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	f002 0203 	and.w	r2, r2, #3
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d132      	bne.n	8001d66 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001d00:	4b46      	ldr	r3, [pc, #280]	@ (8001e1c <HAL_GPIO_DeInit+0x1c4>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	4944      	ldr	r1, [pc, #272]	@ (8001e1c <HAL_GPIO_DeInit+0x1c4>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001d0e:	4b43      	ldr	r3, [pc, #268]	@ (8001e1c <HAL_GPIO_DeInit+0x1c4>)
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4941      	ldr	r1, [pc, #260]	@ (8001e1c <HAL_GPIO_DeInit+0x1c4>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e1c <HAL_GPIO_DeInit+0x1c4>)
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	493d      	ldr	r1, [pc, #244]	@ (8001e1c <HAL_GPIO_DeInit+0x1c4>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e1c <HAL_GPIO_DeInit+0x1c4>)
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	493a      	ldr	r1, [pc, #232]	@ (8001e1c <HAL_GPIO_DeInit+0x1c4>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001d48:	4a2e      	ldr	r2, [pc, #184]	@ (8001e04 <HAL_GPIO_DeInit+0x1ac>)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	43da      	mvns	r2, r3
 8001d58:	482a      	ldr	r0, [pc, #168]	@ (8001e04 <HAL_GPIO_DeInit+0x1ac>)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	400a      	ands	r2, r1
 8001d60:	3302      	adds	r3, #2
 8001d62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2103      	movs	r1, #3
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	08d2      	lsrs	r2, r2, #3
 8001d9c:	4019      	ands	r1, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2103      	movs	r1, #3
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2103      	movs	r1, #3
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	401a      	ands	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b0f      	cmp	r3, #15
 8001df0:	f67f af40 	bls.w	8001c74 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40020800 	.word	0x40020800
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40013c00 	.word	0x40013c00

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e3c:	e003      	b.n	8001e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e267      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d075      	beq.n	8001f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e72:	4b88      	ldr	r3, [pc, #544]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d00c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7e:	4b85      	ldr	r3, [pc, #532]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d112      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8a:	4b82      	ldr	r3, [pc, #520]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e96:	d10b      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	4b7e      	ldr	r3, [pc, #504]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d05b      	beq.n	8001f5c <HAL_RCC_OscConfig+0x108>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d157      	bne.n	8001f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e242      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x74>
 8001eba:	4b76      	ldr	r3, [pc, #472]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a75      	ldr	r2, [pc, #468]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e01d      	b.n	8001f04 <HAL_RCC_OscConfig+0xb0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x98>
 8001ed2:	4b70      	ldr	r3, [pc, #448]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a6f      	ldr	r2, [pc, #444]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b6d      	ldr	r3, [pc, #436]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6c      	ldr	r2, [pc, #432]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0xb0>
 8001eec:	4b69      	ldr	r3, [pc, #420]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a68      	ldr	r2, [pc, #416]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b66      	ldr	r3, [pc, #408]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a65      	ldr	r2, [pc, #404]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f92a 	bl	8001164 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff f926 	bl	8001164 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	@ 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e207      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	4b5b      	ldr	r3, [pc, #364]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0xc0>
 8001f32:	e014      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff f916 	bl	8001164 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff f912 	bl	8001164 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	@ 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1f3      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	4b51      	ldr	r3, [pc, #324]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0xe8>
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d063      	beq.n	8002032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b47      	ldr	r3, [pc, #284]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d11c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f82:	4b44      	ldr	r3, [pc, #272]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d116      	bne.n	8001fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	4b41      	ldr	r3, [pc, #260]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x152>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e1c7      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4937      	ldr	r1, [pc, #220]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	e03a      	b.n	8002032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <HAL_RCC_OscConfig+0x244>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7ff f8cb 	bl	8001164 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff f8c7 	bl	8001164 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1a8      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4925      	ldr	r1, [pc, #148]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002006:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_RCC_OscConfig+0x244>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff f8aa 	bl	8001164 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff f8a6 	bl	8001164 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e187      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d036      	beq.n	80020ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <HAL_RCC_OscConfig+0x248>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff f88a 	bl	8001164 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff f886 	bl	8001164 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e167      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_OscConfig+0x240>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x200>
 8002072:	e01b      	b.n	80020ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_OscConfig+0x248>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff f873 	bl	8001164 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	e00e      	b.n	80020a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002082:	f7ff f86f 	bl	8001164 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d907      	bls.n	80020a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e150      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
 8002094:	40023800 	.word	0x40023800
 8002098:	42470000 	.word	0x42470000
 800209c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	4b88      	ldr	r3, [pc, #544]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ea      	bne.n	8002082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8097 	beq.w	80021e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b81      	ldr	r3, [pc, #516]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b7d      	ldr	r3, [pc, #500]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	4a7c      	ldr	r2, [pc, #496]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020da:	4b7a      	ldr	r3, [pc, #488]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b77      	ldr	r3, [pc, #476]	@ (80022c8 <HAL_RCC_OscConfig+0x474>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f6:	4b74      	ldr	r3, [pc, #464]	@ (80022c8 <HAL_RCC_OscConfig+0x474>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a73      	ldr	r2, [pc, #460]	@ (80022c8 <HAL_RCC_OscConfig+0x474>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7ff f82f 	bl	8001164 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7ff f82b 	bl	8001164 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e10c      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b6a      	ldr	r3, [pc, #424]	@ (80022c8 <HAL_RCC_OscConfig+0x474>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x2ea>
 8002130:	4b64      	ldr	r3, [pc, #400]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002134:	4a63      	ldr	r2, [pc, #396]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	@ 0x70
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x324>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x30c>
 8002146:	4b5f      	ldr	r3, [pc, #380]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214a:	4a5e      	ldr	r2, [pc, #376]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6713      	str	r3, [r2, #112]	@ 0x70
 8002152:	4b5c      	ldr	r3, [pc, #368]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002156:	4a5b      	ldr	r2, [pc, #364]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	@ 0x70
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0x324>
 8002160:	4b58      	ldr	r3, [pc, #352]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002164:	4a57      	ldr	r2, [pc, #348]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	6713      	str	r3, [r2, #112]	@ 0x70
 800216c:	4b55      	ldr	r3, [pc, #340]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002170:	4a54      	ldr	r2, [pc, #336]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002172:	f023 0304 	bic.w	r3, r3, #4
 8002176:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe fff0 	bl	8001164 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe ffec 	bl	8001164 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0cb      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219e:	4b49      	ldr	r3, [pc, #292]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ee      	beq.n	8002188 <HAL_RCC_OscConfig+0x334>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7fe ffda 	bl	8001164 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe ffd6 	bl	8001164 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0b5      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ca:	4b3e      	ldr	r3, [pc, #248]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ee      	bne.n	80021b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021dc:	4b39      	ldr	r3, [pc, #228]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	4a38      	ldr	r2, [pc, #224]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a1 	beq.w	8002334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f2:	4b34      	ldr	r3, [pc, #208]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d05c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d141      	bne.n	800228a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b31      	ldr	r3, [pc, #196]	@ (80022cc <HAL_RCC_OscConfig+0x478>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe ffaa 	bl	8001164 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe ffa6 	bl	8001164 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e087      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	4b27      	ldr	r3, [pc, #156]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	019b      	lsls	r3, r3, #6
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	491b      	ldr	r1, [pc, #108]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	4b1b      	ldr	r3, [pc, #108]	@ (80022cc <HAL_RCC_OscConfig+0x478>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe ff7f 	bl	8001164 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe ff7b 	bl	8001164 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e05c      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227c:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x416>
 8002288:	e054      	b.n	8002334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <HAL_RCC_OscConfig+0x478>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe ff68 	bl	8001164 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe ff64 	bl	8001164 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e045      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_RCC_OscConfig+0x470>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x444>
 80022b6:	e03d      	b.n	8002334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e038      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40007000 	.word	0x40007000
 80022cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCC_OscConfig+0x4ec>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d028      	beq.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d121      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d11a      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002308:	4293      	cmp	r3, r2
 800230a:	d111      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	085b      	lsrs	r3, r3, #1
 8002318:	3b01      	subs	r3, #1
 800231a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0cc      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b68      	ldr	r3, [pc, #416]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d90c      	bls.n	8002380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b65      	ldr	r3, [pc, #404]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b63      	ldr	r3, [pc, #396]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a58      	ldr	r2, [pc, #352]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a52      	ldr	r2, [pc, #328]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b50      	ldr	r3, [pc, #320]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d044      	beq.n	8002464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d119      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b3f      	ldr	r3, [pc, #252]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	4b3b      	ldr	r3, [pc, #236]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e067      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4934      	ldr	r1, [pc, #208]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002434:	f7fe fe96 	bl	8001164 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7fe fe92 	bl	8001164 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e04f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b2b      	ldr	r3, [pc, #172]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d20c      	bcs.n	800248c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ca:	f000 f821 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490a      	ldr	r1, [pc, #40]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fdf6 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023c00 	.word	0x40023c00
 8002500:	40023800 	.word	0x40023800
 8002504:	08003db4 	.word	0x08003db4
 8002508:	20000000 	.word	0x20000000
 800250c:	20000004 	.word	0x20000004

08002510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002514:	b090      	sub	sp, #64	@ 0x40
 8002516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002528:	4b59      	ldr	r3, [pc, #356]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d00d      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x40>
 8002534:	2b08      	cmp	r3, #8
 8002536:	f200 80a1 	bhi.w	800267c <HAL_RCC_GetSysClockFreq+0x16c>
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x34>
 800253e:	2b04      	cmp	r3, #4
 8002540:	d003      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x3a>
 8002542:	e09b      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b53      	ldr	r3, [pc, #332]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x184>)
 8002546:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002548:	e09b      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800254a:	4b53      	ldr	r3, [pc, #332]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x188>)
 800254c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800254e:	e098      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002550:	4b4f      	ldr	r3, [pc, #316]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002558:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255a:	4b4d      	ldr	r3, [pc, #308]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d028      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002566:	4b4a      	ldr	r3, [pc, #296]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	099b      	lsrs	r3, r3, #6
 800256c:	2200      	movs	r2, #0
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	627a      	str	r2, [r7, #36]	@ 0x24
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002578:	2100      	movs	r1, #0
 800257a:	4b47      	ldr	r3, [pc, #284]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x188>)
 800257c:	fb03 f201 	mul.w	r2, r3, r1
 8002580:	2300      	movs	r3, #0
 8002582:	fb00 f303 	mul.w	r3, r0, r3
 8002586:	4413      	add	r3, r2
 8002588:	4a43      	ldr	r2, [pc, #268]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x188>)
 800258a:	fba0 1202 	umull	r1, r2, r0, r2
 800258e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002590:	460a      	mov	r2, r1
 8002592:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002596:	4413      	add	r3, r2
 8002598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800259a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800259c:	2200      	movs	r2, #0
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	61fa      	str	r2, [r7, #28]
 80025a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025aa:	f7fd fe69 	bl	8000280 <__aeabi_uldivmod>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4613      	mov	r3, r2
 80025b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025b6:	e053      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b8:	4b35      	ldr	r3, [pc, #212]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	2200      	movs	r2, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	617a      	str	r2, [r7, #20]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025ca:	f04f 0b00 	mov.w	fp, #0
 80025ce:	4652      	mov	r2, sl
 80025d0:	465b      	mov	r3, fp
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0159      	lsls	r1, r3, #5
 80025dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e0:	0150      	lsls	r0, r2, #5
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	ebb2 080a 	subs.w	r8, r2, sl
 80025ea:	eb63 090b 	sbc.w	r9, r3, fp
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002602:	ebb2 0408 	subs.w	r4, r2, r8
 8002606:	eb63 0509 	sbc.w	r5, r3, r9
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	00eb      	lsls	r3, r5, #3
 8002614:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002618:	00e2      	lsls	r2, r4, #3
 800261a:	4614      	mov	r4, r2
 800261c:	461d      	mov	r5, r3
 800261e:	eb14 030a 	adds.w	r3, r4, sl
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	eb45 030b 	adc.w	r3, r5, fp
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002636:	4629      	mov	r1, r5
 8002638:	028b      	lsls	r3, r1, #10
 800263a:	4621      	mov	r1, r4
 800263c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002640:	4621      	mov	r1, r4
 8002642:	028a      	lsls	r2, r1, #10
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264a:	2200      	movs	r2, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002654:	f7fd fe14 	bl	8000280 <__aeabi_uldivmod>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4613      	mov	r3, r2
 800265e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	3301      	adds	r3, #1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002670:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800267a:	e002      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x184>)
 800267e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002684:	4618      	mov	r0, r3
 8002686:	3740      	adds	r7, #64	@ 0x40
 8002688:	46bd      	mov	sp, r7
 800268a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	00f42400 	.word	0x00f42400
 8002698:	017d7840 	.word	0x017d7840

0800269c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a0:	4b03      	ldr	r3, [pc, #12]	@ (80026b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b8:	f7ff fff0 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	0a9b      	lsrs	r3, r3, #10
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4903      	ldr	r1, [pc, #12]	@ (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	08003dc4 	.word	0x08003dc4

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026e0:	f7ff ffdc 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0b5b      	lsrs	r3, r3, #13
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	@ (8002700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	08003dc4 	.word	0x08003dc4

08002704 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800270a:	f7fe fd2b 	bl	8001164 <HAL_GetTick>
 800270e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002710:	4b5d      	ldr	r3, [pc, #372]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a5c      	ldr	r2, [pc, #368]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271e:	f7fe fd21 	bl	8001164 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0a7      	b.n	8002880 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002730:	4b55      	ldr	r3, [pc, #340]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800273c:	4b52      	ldr	r3, [pc, #328]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a51      	ldr	r2, [pc, #324]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002746:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002748:	f7fe fd0c 	bl	8001164 <HAL_GetTick>
 800274c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800274e:	4b4e      	ldr	r3, [pc, #312]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002756:	f7fe fd05 	bl	8001164 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e089      	b.n	8002880 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800276c:	4b46      	ldr	r3, [pc, #280]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002778:	f7fe fcf4 	bl	8001164 <HAL_GetTick>
 800277c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800277e:	4b42      	ldr	r3, [pc, #264]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a41      	ldr	r2, [pc, #260]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002784:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8002788:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe fcea 	bl	8001164 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	@ 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e070      	b.n	8002880 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800279e:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80027aa:	f7fe fcdb 	bl	8001164 <HAL_GetTick>
 80027ae:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80027b0:	4b35      	ldr	r3, [pc, #212]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a34      	ldr	r2, [pc, #208]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 80027b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ba:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe fcd1 	bl	8001164 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e057      	b.n	8002880 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80027d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80027dc:	f7fe fcc2 	bl	8001164 <HAL_GetTick>
 80027e0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80027e2:	4b29      	ldr	r3, [pc, #164]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a28      	ldr	r2, [pc, #160]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 80027e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027ec:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027f0:	f7fe fcb8 	bl	8001164 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e03e      	b.n	8002880 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002802:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800280e:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002810:	4a1e      	ldr	r2, [pc, #120]	@ (800288c <HAL_RCC_DeInit+0x188>)
 8002812:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002814:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002816:	4a1e      	ldr	r2, [pc, #120]	@ (8002890 <HAL_RCC_DeInit+0x18c>)
 8002818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800281c:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002822:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002826:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002828:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a16      	ldr	r2, [pc, #88]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 800282e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002832:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 800283a:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 800283e:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a10      	ldr	r2, [pc, #64]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002846:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800284a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800284c:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002850:	4a0d      	ldr	r2, [pc, #52]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285c:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <HAL_RCC_DeInit+0x184>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002862:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_RCC_DeInit+0x190>)
 8002866:	4a0c      	ldr	r2, [pc, #48]	@ (8002898 <HAL_RCC_DeInit+0x194>)
 8002868:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800286a:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <HAL_RCC_DeInit+0x198>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fc34 	bl	80010dc <HAL_InitTick>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800287e:	2300      	movs	r3, #0
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	04003010 	.word	0x04003010
 8002890:	20003000 	.word	0x20003000
 8002894:	20000000 	.word	0x20000000
 8002898:	00f42400 	.word	0x00f42400
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e042      	b.n	8002938 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fb10 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2224      	movs	r2, #36	@ 0x24
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fa3b 	bl	8002d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e024      	b.n	800299c <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2224      	movs	r2, #36	@ 0x24
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002968:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe fb3a 	bl	8000fe4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	@ 0x28
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d175      	bne.n	8002ab0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_UART_Transmit+0x2c>
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e06e      	b.n	8002ab2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2221      	movs	r2, #33	@ 0x21
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029e2:	f7fe fbbf 	bl	8001164 <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fc:	d108      	bne.n	8002a10 <HAL_UART_Transmit+0x6c>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d104      	bne.n	8002a10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	e003      	b.n	8002a18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a18:	e02e      	b.n	8002a78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2180      	movs	r1, #128	@ 0x80
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f8df 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e03a      	b.n	8002ab2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10b      	bne.n	8002a5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	3302      	adds	r3, #2
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	e007      	b.n	8002a6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	3301      	adds	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1cb      	bne.n	8002a1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2140      	movs	r1, #64	@ 0x40
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f8ab 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e006      	b.n	8002ab2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b08a      	sub	sp, #40	@ 0x28
 8002abe:	af02      	add	r7, sp, #8
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	f040 8081 	bne.w	8002bde <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_UART_Receive+0x2e>
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e079      	b.n	8002be0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2222      	movs	r2, #34	@ 0x22
 8002af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fb30 	bl	8001164 <HAL_GetTick>
 8002b04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	88fa      	ldrh	r2, [r7, #6]
 8002b0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	88fa      	ldrh	r2, [r7, #6]
 8002b10:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b1a:	d108      	bne.n	8002b2e <HAL_UART_Receive+0x74>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d104      	bne.n	8002b2e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	e003      	b.n	8002b36 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b36:	e047      	b.n	8002bc8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2120      	movs	r1, #32
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f850 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e042      	b.n	8002be0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10c      	bne.n	8002b7a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	3302      	adds	r3, #2
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	e01f      	b.n	8002bba <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b82:	d007      	beq.n	8002b94 <HAL_UART_Receive+0xda>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <HAL_UART_Receive+0xe8>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e008      	b.n	8002bb4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1b2      	bne.n	8002b38 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
  }
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf8:	e03b      	b.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d037      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fe faaf 	bl	8001164 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	6a3a      	ldr	r2, [r7, #32]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e03a      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d023      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b80      	cmp	r3, #128	@ 0x80
 8002c2e:	d020      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b40      	cmp	r3, #64	@ 0x40
 8002c34:	d01d      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d116      	bne.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f81d 	bl	8002c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2208      	movs	r2, #8
 8002c64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00f      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d0b4      	beq.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b095      	sub	sp, #84	@ 0x54
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cc2:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e5      	bne.n	8002ca2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3314      	adds	r3, #20
 8002cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	e853 3f00 	ldrex	r3, [r3]
 8002ce4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3314      	adds	r3, #20
 8002cf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cfe:	e841 2300 	strex	r3, r2, [r1]
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e5      	bne.n	8002cd6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d119      	bne.n	8002d46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	330c      	adds	r3, #12
 8002d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f023 0310 	bic.w	r3, r3, #16
 8002d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d32:	61ba      	str	r2, [r7, #24]
 8002d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d36:	6979      	ldr	r1, [r7, #20]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1e5      	bne.n	8002d12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d54:	bf00      	nop
 8002d56:	3754      	adds	r7, #84	@ 0x54
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d64:	b0c0      	sub	sp, #256	@ 0x100
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7c:	68d9      	ldr	r1, [r3, #12]
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	ea40 0301 	orr.w	r3, r0, r1
 8002d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002db8:	f021 010c 	bic.w	r1, r1, #12
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dda:	6999      	ldr	r1, [r3, #24]
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	ea40 0301 	orr.w	r3, r0, r1
 8002de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b8f      	ldr	r3, [pc, #572]	@ (800302c <UART_SetConfig+0x2cc>)
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d005      	beq.n	8002e00 <UART_SetConfig+0xa0>
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b8d      	ldr	r3, [pc, #564]	@ (8003030 <UART_SetConfig+0x2d0>)
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d104      	bne.n	8002e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e00:	f7ff fc6c 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8002e04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e08:	e003      	b.n	8002e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e0a:	f7ff fc53 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8002e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e1c:	f040 810c 	bne.w	8003038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e32:	4622      	mov	r2, r4
 8002e34:	462b      	mov	r3, r5
 8002e36:	1891      	adds	r1, r2, r2
 8002e38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e3a:	415b      	adcs	r3, r3
 8002e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e42:	4621      	mov	r1, r4
 8002e44:	eb12 0801 	adds.w	r8, r2, r1
 8002e48:	4629      	mov	r1, r5
 8002e4a:	eb43 0901 	adc.w	r9, r3, r1
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e62:	4690      	mov	r8, r2
 8002e64:	4699      	mov	r9, r3
 8002e66:	4623      	mov	r3, r4
 8002e68:	eb18 0303 	adds.w	r3, r8, r3
 8002e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e70:	462b      	mov	r3, r5
 8002e72:	eb49 0303 	adc.w	r3, r9, r3
 8002e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e8e:	460b      	mov	r3, r1
 8002e90:	18db      	adds	r3, r3, r3
 8002e92:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e94:	4613      	mov	r3, r2
 8002e96:	eb42 0303 	adc.w	r3, r2, r3
 8002e9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ea4:	f7fd f9ec 	bl	8000280 <__aeabi_uldivmod>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4b61      	ldr	r3, [pc, #388]	@ (8003034 <UART_SetConfig+0x2d4>)
 8002eae:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	011c      	lsls	r4, r3, #4
 8002eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ec0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ec8:	4642      	mov	r2, r8
 8002eca:	464b      	mov	r3, r9
 8002ecc:	1891      	adds	r1, r2, r2
 8002ece:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ed0:	415b      	adcs	r3, r3
 8002ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ed8:	4641      	mov	r1, r8
 8002eda:	eb12 0a01 	adds.w	sl, r2, r1
 8002ede:	4649      	mov	r1, r9
 8002ee0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ef8:	4692      	mov	sl, r2
 8002efa:	469b      	mov	fp, r3
 8002efc:	4643      	mov	r3, r8
 8002efe:	eb1a 0303 	adds.w	r3, sl, r3
 8002f02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f06:	464b      	mov	r3, r9
 8002f08:	eb4b 0303 	adc.w	r3, fp, r3
 8002f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f24:	460b      	mov	r3, r1
 8002f26:	18db      	adds	r3, r3, r3
 8002f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	eb42 0303 	adc.w	r3, r2, r3
 8002f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f3a:	f7fd f9a1 	bl	8000280 <__aeabi_uldivmod>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4611      	mov	r1, r2
 8002f44:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <UART_SetConfig+0x2d4>)
 8002f46:	fba3 2301 	umull	r2, r3, r3, r1
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	2264      	movs	r2, #100	@ 0x64
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	1acb      	subs	r3, r1, r3
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f5a:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <UART_SetConfig+0x2d4>)
 8002f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f68:	441c      	add	r4, r3
 8002f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	464b      	mov	r3, r9
 8002f80:	1891      	adds	r1, r2, r2
 8002f82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f84:	415b      	adcs	r3, r3
 8002f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	1851      	adds	r1, r2, r1
 8002f90:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f92:	4649      	mov	r1, r9
 8002f94:	414b      	adcs	r3, r1
 8002f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002fa4:	4659      	mov	r1, fp
 8002fa6:	00cb      	lsls	r3, r1, #3
 8002fa8:	4651      	mov	r1, sl
 8002faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fae:	4651      	mov	r1, sl
 8002fb0:	00ca      	lsls	r2, r1, #3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4642      	mov	r2, r8
 8002fba:	189b      	adds	r3, r3, r2
 8002fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fc0:	464b      	mov	r3, r9
 8002fc2:	460a      	mov	r2, r1
 8002fc4:	eb42 0303 	adc.w	r3, r2, r3
 8002fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	18db      	adds	r3, r3, r3
 8002fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	eb42 0303 	adc.w	r3, r2, r3
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ff6:	f7fd f943 	bl	8000280 <__aeabi_uldivmod>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <UART_SetConfig+0x2d4>)
 8003000:	fba3 1302 	umull	r1, r3, r3, r2
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	2164      	movs	r1, #100	@ 0x64
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	3332      	adds	r3, #50	@ 0x32
 8003012:	4a08      	ldr	r2, [pc, #32]	@ (8003034 <UART_SetConfig+0x2d4>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	f003 0207 	and.w	r2, r3, #7
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4422      	add	r2, r4
 8003026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003028:	e106      	b.n	8003238 <UART_SetConfig+0x4d8>
 800302a:	bf00      	nop
 800302c:	40011000 	.word	0x40011000
 8003030:	40011400 	.word	0x40011400
 8003034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800303c:	2200      	movs	r2, #0
 800303e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003042:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800304a:	4642      	mov	r2, r8
 800304c:	464b      	mov	r3, r9
 800304e:	1891      	adds	r1, r2, r2
 8003050:	6239      	str	r1, [r7, #32]
 8003052:	415b      	adcs	r3, r3
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
 8003056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800305a:	4641      	mov	r1, r8
 800305c:	1854      	adds	r4, r2, r1
 800305e:	4649      	mov	r1, r9
 8003060:	eb43 0501 	adc.w	r5, r3, r1
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	00eb      	lsls	r3, r5, #3
 800306e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003072:	00e2      	lsls	r2, r4, #3
 8003074:	4614      	mov	r4, r2
 8003076:	461d      	mov	r5, r3
 8003078:	4643      	mov	r3, r8
 800307a:	18e3      	adds	r3, r4, r3
 800307c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003080:	464b      	mov	r3, r9
 8003082:	eb45 0303 	adc.w	r3, r5, r3
 8003086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800308a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003096:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030a6:	4629      	mov	r1, r5
 80030a8:	008b      	lsls	r3, r1, #2
 80030aa:	4621      	mov	r1, r4
 80030ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030b0:	4621      	mov	r1, r4
 80030b2:	008a      	lsls	r2, r1, #2
 80030b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030b8:	f7fd f8e2 	bl	8000280 <__aeabi_uldivmod>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4b60      	ldr	r3, [pc, #384]	@ (8003244 <UART_SetConfig+0x4e4>)
 80030c2:	fba3 2302 	umull	r2, r3, r3, r2
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	011c      	lsls	r4, r3, #4
 80030ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030dc:	4642      	mov	r2, r8
 80030de:	464b      	mov	r3, r9
 80030e0:	1891      	adds	r1, r2, r2
 80030e2:	61b9      	str	r1, [r7, #24]
 80030e4:	415b      	adcs	r3, r3
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ec:	4641      	mov	r1, r8
 80030ee:	1851      	adds	r1, r2, r1
 80030f0:	6139      	str	r1, [r7, #16]
 80030f2:	4649      	mov	r1, r9
 80030f4:	414b      	adcs	r3, r1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003104:	4659      	mov	r1, fp
 8003106:	00cb      	lsls	r3, r1, #3
 8003108:	4651      	mov	r1, sl
 800310a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800310e:	4651      	mov	r1, sl
 8003110:	00ca      	lsls	r2, r1, #3
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	4603      	mov	r3, r0
 8003118:	4642      	mov	r2, r8
 800311a:	189b      	adds	r3, r3, r2
 800311c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003120:	464b      	mov	r3, r9
 8003122:	460a      	mov	r2, r1
 8003124:	eb42 0303 	adc.w	r3, r2, r3
 8003128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003136:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003144:	4649      	mov	r1, r9
 8003146:	008b      	lsls	r3, r1, #2
 8003148:	4641      	mov	r1, r8
 800314a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800314e:	4641      	mov	r1, r8
 8003150:	008a      	lsls	r2, r1, #2
 8003152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003156:	f7fd f893 	bl	8000280 <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4611      	mov	r1, r2
 8003160:	4b38      	ldr	r3, [pc, #224]	@ (8003244 <UART_SetConfig+0x4e4>)
 8003162:	fba3 2301 	umull	r2, r3, r3, r1
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2264      	movs	r2, #100	@ 0x64
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	1acb      	subs	r3, r1, r3
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	3332      	adds	r3, #50	@ 0x32
 8003174:	4a33      	ldr	r2, [pc, #204]	@ (8003244 <UART_SetConfig+0x4e4>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003180:	441c      	add	r4, r3
 8003182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003186:	2200      	movs	r2, #0
 8003188:	673b      	str	r3, [r7, #112]	@ 0x70
 800318a:	677a      	str	r2, [r7, #116]	@ 0x74
 800318c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	1891      	adds	r1, r2, r2
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	415b      	adcs	r3, r3
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031a0:	4641      	mov	r1, r8
 80031a2:	1851      	adds	r1, r2, r1
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	4649      	mov	r1, r9
 80031a8:	414b      	adcs	r3, r1
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031b8:	4659      	mov	r1, fp
 80031ba:	00cb      	lsls	r3, r1, #3
 80031bc:	4651      	mov	r1, sl
 80031be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c2:	4651      	mov	r1, sl
 80031c4:	00ca      	lsls	r2, r1, #3
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	4642      	mov	r2, r8
 80031ce:	189b      	adds	r3, r3, r2
 80031d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031d2:	464b      	mov	r3, r9
 80031d4:	460a      	mov	r2, r1
 80031d6:	eb42 0303 	adc.w	r3, r2, r3
 80031da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80031e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80031f4:	4649      	mov	r1, r9
 80031f6:	008b      	lsls	r3, r1, #2
 80031f8:	4641      	mov	r1, r8
 80031fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031fe:	4641      	mov	r1, r8
 8003200:	008a      	lsls	r2, r1, #2
 8003202:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003206:	f7fd f83b 	bl	8000280 <__aeabi_uldivmod>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4b0d      	ldr	r3, [pc, #52]	@ (8003244 <UART_SetConfig+0x4e4>)
 8003210:	fba3 1302 	umull	r1, r3, r3, r2
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	2164      	movs	r1, #100	@ 0x64
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	3332      	adds	r3, #50	@ 0x32
 8003222:	4a08      	ldr	r2, [pc, #32]	@ (8003244 <UART_SetConfig+0x4e4>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4422      	add	r2, r4
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	bf00      	nop
 800323a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800323e:	46bd      	mov	sp, r7
 8003240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003244:	51eb851f 	.word	0x51eb851f

08003248 <_vsiprintf_r>:
 8003248:	b500      	push	{lr}
 800324a:	b09b      	sub	sp, #108	@ 0x6c
 800324c:	9100      	str	r1, [sp, #0]
 800324e:	9104      	str	r1, [sp, #16]
 8003250:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003254:	9105      	str	r1, [sp, #20]
 8003256:	9102      	str	r1, [sp, #8]
 8003258:	4905      	ldr	r1, [pc, #20]	@ (8003270 <_vsiprintf_r+0x28>)
 800325a:	9103      	str	r1, [sp, #12]
 800325c:	4669      	mov	r1, sp
 800325e:	f000 f99b 	bl	8003598 <_svfiprintf_r>
 8003262:	9b00      	ldr	r3, [sp, #0]
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	b01b      	add	sp, #108	@ 0x6c
 800326a:	f85d fb04 	ldr.w	pc, [sp], #4
 800326e:	bf00      	nop
 8003270:	ffff0208 	.word	0xffff0208

08003274 <vsiprintf>:
 8003274:	4613      	mov	r3, r2
 8003276:	460a      	mov	r2, r1
 8003278:	4601      	mov	r1, r0
 800327a:	4802      	ldr	r0, [pc, #8]	@ (8003284 <vsiprintf+0x10>)
 800327c:	6800      	ldr	r0, [r0, #0]
 800327e:	f7ff bfe3 	b.w	8003248 <_vsiprintf_r>
 8003282:	bf00      	nop
 8003284:	2000000c 	.word	0x2000000c

08003288 <memset>:
 8003288:	4402      	add	r2, r0
 800328a:	4603      	mov	r3, r0
 800328c:	4293      	cmp	r3, r2
 800328e:	d100      	bne.n	8003292 <memset+0xa>
 8003290:	4770      	bx	lr
 8003292:	f803 1b01 	strb.w	r1, [r3], #1
 8003296:	e7f9      	b.n	800328c <memset+0x4>

08003298 <__errno>:
 8003298:	4b01      	ldr	r3, [pc, #4]	@ (80032a0 <__errno+0x8>)
 800329a:	6818      	ldr	r0, [r3, #0]
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <__libc_init_array>:
 80032a4:	b570      	push	{r4, r5, r6, lr}
 80032a6:	4d0d      	ldr	r5, [pc, #52]	@ (80032dc <__libc_init_array+0x38>)
 80032a8:	4c0d      	ldr	r4, [pc, #52]	@ (80032e0 <__libc_init_array+0x3c>)
 80032aa:	1b64      	subs	r4, r4, r5
 80032ac:	10a4      	asrs	r4, r4, #2
 80032ae:	2600      	movs	r6, #0
 80032b0:	42a6      	cmp	r6, r4
 80032b2:	d109      	bne.n	80032c8 <__libc_init_array+0x24>
 80032b4:	4d0b      	ldr	r5, [pc, #44]	@ (80032e4 <__libc_init_array+0x40>)
 80032b6:	4c0c      	ldr	r4, [pc, #48]	@ (80032e8 <__libc_init_array+0x44>)
 80032b8:	f000 fc66 	bl	8003b88 <_init>
 80032bc:	1b64      	subs	r4, r4, r5
 80032be:	10a4      	asrs	r4, r4, #2
 80032c0:	2600      	movs	r6, #0
 80032c2:	42a6      	cmp	r6, r4
 80032c4:	d105      	bne.n	80032d2 <__libc_init_array+0x2e>
 80032c6:	bd70      	pop	{r4, r5, r6, pc}
 80032c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032cc:	4798      	blx	r3
 80032ce:	3601      	adds	r6, #1
 80032d0:	e7ee      	b.n	80032b0 <__libc_init_array+0xc>
 80032d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d6:	4798      	blx	r3
 80032d8:	3601      	adds	r6, #1
 80032da:	e7f2      	b.n	80032c2 <__libc_init_array+0x1e>
 80032dc:	08003e08 	.word	0x08003e08
 80032e0:	08003e08 	.word	0x08003e08
 80032e4:	08003e08 	.word	0x08003e08
 80032e8:	08003e0c 	.word	0x08003e0c

080032ec <__retarget_lock_acquire_recursive>:
 80032ec:	4770      	bx	lr

080032ee <__retarget_lock_release_recursive>:
 80032ee:	4770      	bx	lr

080032f0 <_free_r>:
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	4605      	mov	r5, r0
 80032f4:	2900      	cmp	r1, #0
 80032f6:	d041      	beq.n	800337c <_free_r+0x8c>
 80032f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032fc:	1f0c      	subs	r4, r1, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bfb8      	it	lt
 8003302:	18e4      	addlt	r4, r4, r3
 8003304:	f000 f8e0 	bl	80034c8 <__malloc_lock>
 8003308:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <_free_r+0x90>)
 800330a:	6813      	ldr	r3, [r2, #0]
 800330c:	b933      	cbnz	r3, 800331c <_free_r+0x2c>
 800330e:	6063      	str	r3, [r4, #4]
 8003310:	6014      	str	r4, [r2, #0]
 8003312:	4628      	mov	r0, r5
 8003314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003318:	f000 b8dc 	b.w	80034d4 <__malloc_unlock>
 800331c:	42a3      	cmp	r3, r4
 800331e:	d908      	bls.n	8003332 <_free_r+0x42>
 8003320:	6820      	ldr	r0, [r4, #0]
 8003322:	1821      	adds	r1, r4, r0
 8003324:	428b      	cmp	r3, r1
 8003326:	bf01      	itttt	eq
 8003328:	6819      	ldreq	r1, [r3, #0]
 800332a:	685b      	ldreq	r3, [r3, #4]
 800332c:	1809      	addeq	r1, r1, r0
 800332e:	6021      	streq	r1, [r4, #0]
 8003330:	e7ed      	b.n	800330e <_free_r+0x1e>
 8003332:	461a      	mov	r2, r3
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	b10b      	cbz	r3, 800333c <_free_r+0x4c>
 8003338:	42a3      	cmp	r3, r4
 800333a:	d9fa      	bls.n	8003332 <_free_r+0x42>
 800333c:	6811      	ldr	r1, [r2, #0]
 800333e:	1850      	adds	r0, r2, r1
 8003340:	42a0      	cmp	r0, r4
 8003342:	d10b      	bne.n	800335c <_free_r+0x6c>
 8003344:	6820      	ldr	r0, [r4, #0]
 8003346:	4401      	add	r1, r0
 8003348:	1850      	adds	r0, r2, r1
 800334a:	4283      	cmp	r3, r0
 800334c:	6011      	str	r1, [r2, #0]
 800334e:	d1e0      	bne.n	8003312 <_free_r+0x22>
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	6053      	str	r3, [r2, #4]
 8003356:	4408      	add	r0, r1
 8003358:	6010      	str	r0, [r2, #0]
 800335a:	e7da      	b.n	8003312 <_free_r+0x22>
 800335c:	d902      	bls.n	8003364 <_free_r+0x74>
 800335e:	230c      	movs	r3, #12
 8003360:	602b      	str	r3, [r5, #0]
 8003362:	e7d6      	b.n	8003312 <_free_r+0x22>
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	1821      	adds	r1, r4, r0
 8003368:	428b      	cmp	r3, r1
 800336a:	bf04      	itt	eq
 800336c:	6819      	ldreq	r1, [r3, #0]
 800336e:	685b      	ldreq	r3, [r3, #4]
 8003370:	6063      	str	r3, [r4, #4]
 8003372:	bf04      	itt	eq
 8003374:	1809      	addeq	r1, r1, r0
 8003376:	6021      	streq	r1, [r4, #0]
 8003378:	6054      	str	r4, [r2, #4]
 800337a:	e7ca      	b.n	8003312 <_free_r+0x22>
 800337c:	bd38      	pop	{r3, r4, r5, pc}
 800337e:	bf00      	nop
 8003380:	200002c4 	.word	0x200002c4

08003384 <sbrk_aligned>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	4e0f      	ldr	r6, [pc, #60]	@ (80033c4 <sbrk_aligned+0x40>)
 8003388:	460c      	mov	r4, r1
 800338a:	6831      	ldr	r1, [r6, #0]
 800338c:	4605      	mov	r5, r0
 800338e:	b911      	cbnz	r1, 8003396 <sbrk_aligned+0x12>
 8003390:	f000 fba6 	bl	8003ae0 <_sbrk_r>
 8003394:	6030      	str	r0, [r6, #0]
 8003396:	4621      	mov	r1, r4
 8003398:	4628      	mov	r0, r5
 800339a:	f000 fba1 	bl	8003ae0 <_sbrk_r>
 800339e:	1c43      	adds	r3, r0, #1
 80033a0:	d103      	bne.n	80033aa <sbrk_aligned+0x26>
 80033a2:	f04f 34ff 	mov.w	r4, #4294967295
 80033a6:	4620      	mov	r0, r4
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	1cc4      	adds	r4, r0, #3
 80033ac:	f024 0403 	bic.w	r4, r4, #3
 80033b0:	42a0      	cmp	r0, r4
 80033b2:	d0f8      	beq.n	80033a6 <sbrk_aligned+0x22>
 80033b4:	1a21      	subs	r1, r4, r0
 80033b6:	4628      	mov	r0, r5
 80033b8:	f000 fb92 	bl	8003ae0 <_sbrk_r>
 80033bc:	3001      	adds	r0, #1
 80033be:	d1f2      	bne.n	80033a6 <sbrk_aligned+0x22>
 80033c0:	e7ef      	b.n	80033a2 <sbrk_aligned+0x1e>
 80033c2:	bf00      	nop
 80033c4:	200002c0 	.word	0x200002c0

080033c8 <_malloc_r>:
 80033c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033cc:	1ccd      	adds	r5, r1, #3
 80033ce:	f025 0503 	bic.w	r5, r5, #3
 80033d2:	3508      	adds	r5, #8
 80033d4:	2d0c      	cmp	r5, #12
 80033d6:	bf38      	it	cc
 80033d8:	250c      	movcc	r5, #12
 80033da:	2d00      	cmp	r5, #0
 80033dc:	4606      	mov	r6, r0
 80033de:	db01      	blt.n	80033e4 <_malloc_r+0x1c>
 80033e0:	42a9      	cmp	r1, r5
 80033e2:	d904      	bls.n	80033ee <_malloc_r+0x26>
 80033e4:	230c      	movs	r3, #12
 80033e6:	6033      	str	r3, [r6, #0]
 80033e8:	2000      	movs	r0, #0
 80033ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034c4 <_malloc_r+0xfc>
 80033f2:	f000 f869 	bl	80034c8 <__malloc_lock>
 80033f6:	f8d8 3000 	ldr.w	r3, [r8]
 80033fa:	461c      	mov	r4, r3
 80033fc:	bb44      	cbnz	r4, 8003450 <_malloc_r+0x88>
 80033fe:	4629      	mov	r1, r5
 8003400:	4630      	mov	r0, r6
 8003402:	f7ff ffbf 	bl	8003384 <sbrk_aligned>
 8003406:	1c43      	adds	r3, r0, #1
 8003408:	4604      	mov	r4, r0
 800340a:	d158      	bne.n	80034be <_malloc_r+0xf6>
 800340c:	f8d8 4000 	ldr.w	r4, [r8]
 8003410:	4627      	mov	r7, r4
 8003412:	2f00      	cmp	r7, #0
 8003414:	d143      	bne.n	800349e <_malloc_r+0xd6>
 8003416:	2c00      	cmp	r4, #0
 8003418:	d04b      	beq.n	80034b2 <_malloc_r+0xea>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	4639      	mov	r1, r7
 800341e:	4630      	mov	r0, r6
 8003420:	eb04 0903 	add.w	r9, r4, r3
 8003424:	f000 fb5c 	bl	8003ae0 <_sbrk_r>
 8003428:	4581      	cmp	r9, r0
 800342a:	d142      	bne.n	80034b2 <_malloc_r+0xea>
 800342c:	6821      	ldr	r1, [r4, #0]
 800342e:	1a6d      	subs	r5, r5, r1
 8003430:	4629      	mov	r1, r5
 8003432:	4630      	mov	r0, r6
 8003434:	f7ff ffa6 	bl	8003384 <sbrk_aligned>
 8003438:	3001      	adds	r0, #1
 800343a:	d03a      	beq.n	80034b2 <_malloc_r+0xea>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	442b      	add	r3, r5
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	f8d8 3000 	ldr.w	r3, [r8]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	bb62      	cbnz	r2, 80034a4 <_malloc_r+0xdc>
 800344a:	f8c8 7000 	str.w	r7, [r8]
 800344e:	e00f      	b.n	8003470 <_malloc_r+0xa8>
 8003450:	6822      	ldr	r2, [r4, #0]
 8003452:	1b52      	subs	r2, r2, r5
 8003454:	d420      	bmi.n	8003498 <_malloc_r+0xd0>
 8003456:	2a0b      	cmp	r2, #11
 8003458:	d917      	bls.n	800348a <_malloc_r+0xc2>
 800345a:	1961      	adds	r1, r4, r5
 800345c:	42a3      	cmp	r3, r4
 800345e:	6025      	str	r5, [r4, #0]
 8003460:	bf18      	it	ne
 8003462:	6059      	strne	r1, [r3, #4]
 8003464:	6863      	ldr	r3, [r4, #4]
 8003466:	bf08      	it	eq
 8003468:	f8c8 1000 	streq.w	r1, [r8]
 800346c:	5162      	str	r2, [r4, r5]
 800346e:	604b      	str	r3, [r1, #4]
 8003470:	4630      	mov	r0, r6
 8003472:	f000 f82f 	bl	80034d4 <__malloc_unlock>
 8003476:	f104 000b 	add.w	r0, r4, #11
 800347a:	1d23      	adds	r3, r4, #4
 800347c:	f020 0007 	bic.w	r0, r0, #7
 8003480:	1ac2      	subs	r2, r0, r3
 8003482:	bf1c      	itt	ne
 8003484:	1a1b      	subne	r3, r3, r0
 8003486:	50a3      	strne	r3, [r4, r2]
 8003488:	e7af      	b.n	80033ea <_malloc_r+0x22>
 800348a:	6862      	ldr	r2, [r4, #4]
 800348c:	42a3      	cmp	r3, r4
 800348e:	bf0c      	ite	eq
 8003490:	f8c8 2000 	streq.w	r2, [r8]
 8003494:	605a      	strne	r2, [r3, #4]
 8003496:	e7eb      	b.n	8003470 <_malloc_r+0xa8>
 8003498:	4623      	mov	r3, r4
 800349a:	6864      	ldr	r4, [r4, #4]
 800349c:	e7ae      	b.n	80033fc <_malloc_r+0x34>
 800349e:	463c      	mov	r4, r7
 80034a0:	687f      	ldr	r7, [r7, #4]
 80034a2:	e7b6      	b.n	8003412 <_malloc_r+0x4a>
 80034a4:	461a      	mov	r2, r3
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	42a3      	cmp	r3, r4
 80034aa:	d1fb      	bne.n	80034a4 <_malloc_r+0xdc>
 80034ac:	2300      	movs	r3, #0
 80034ae:	6053      	str	r3, [r2, #4]
 80034b0:	e7de      	b.n	8003470 <_malloc_r+0xa8>
 80034b2:	230c      	movs	r3, #12
 80034b4:	6033      	str	r3, [r6, #0]
 80034b6:	4630      	mov	r0, r6
 80034b8:	f000 f80c 	bl	80034d4 <__malloc_unlock>
 80034bc:	e794      	b.n	80033e8 <_malloc_r+0x20>
 80034be:	6005      	str	r5, [r0, #0]
 80034c0:	e7d6      	b.n	8003470 <_malloc_r+0xa8>
 80034c2:	bf00      	nop
 80034c4:	200002c4 	.word	0x200002c4

080034c8 <__malloc_lock>:
 80034c8:	4801      	ldr	r0, [pc, #4]	@ (80034d0 <__malloc_lock+0x8>)
 80034ca:	f7ff bf0f 	b.w	80032ec <__retarget_lock_acquire_recursive>
 80034ce:	bf00      	nop
 80034d0:	200002bc 	.word	0x200002bc

080034d4 <__malloc_unlock>:
 80034d4:	4801      	ldr	r0, [pc, #4]	@ (80034dc <__malloc_unlock+0x8>)
 80034d6:	f7ff bf0a 	b.w	80032ee <__retarget_lock_release_recursive>
 80034da:	bf00      	nop
 80034dc:	200002bc 	.word	0x200002bc

080034e0 <__ssputs_r>:
 80034e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e4:	688e      	ldr	r6, [r1, #8]
 80034e6:	461f      	mov	r7, r3
 80034e8:	42be      	cmp	r6, r7
 80034ea:	680b      	ldr	r3, [r1, #0]
 80034ec:	4682      	mov	sl, r0
 80034ee:	460c      	mov	r4, r1
 80034f0:	4690      	mov	r8, r2
 80034f2:	d82d      	bhi.n	8003550 <__ssputs_r+0x70>
 80034f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80034fc:	d026      	beq.n	800354c <__ssputs_r+0x6c>
 80034fe:	6965      	ldr	r5, [r4, #20]
 8003500:	6909      	ldr	r1, [r1, #16]
 8003502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003506:	eba3 0901 	sub.w	r9, r3, r1
 800350a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800350e:	1c7b      	adds	r3, r7, #1
 8003510:	444b      	add	r3, r9
 8003512:	106d      	asrs	r5, r5, #1
 8003514:	429d      	cmp	r5, r3
 8003516:	bf38      	it	cc
 8003518:	461d      	movcc	r5, r3
 800351a:	0553      	lsls	r3, r2, #21
 800351c:	d527      	bpl.n	800356e <__ssputs_r+0x8e>
 800351e:	4629      	mov	r1, r5
 8003520:	f7ff ff52 	bl	80033c8 <_malloc_r>
 8003524:	4606      	mov	r6, r0
 8003526:	b360      	cbz	r0, 8003582 <__ssputs_r+0xa2>
 8003528:	6921      	ldr	r1, [r4, #16]
 800352a:	464a      	mov	r2, r9
 800352c:	f000 fae8 	bl	8003b00 <memcpy>
 8003530:	89a3      	ldrh	r3, [r4, #12]
 8003532:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800353a:	81a3      	strh	r3, [r4, #12]
 800353c:	6126      	str	r6, [r4, #16]
 800353e:	6165      	str	r5, [r4, #20]
 8003540:	444e      	add	r6, r9
 8003542:	eba5 0509 	sub.w	r5, r5, r9
 8003546:	6026      	str	r6, [r4, #0]
 8003548:	60a5      	str	r5, [r4, #8]
 800354a:	463e      	mov	r6, r7
 800354c:	42be      	cmp	r6, r7
 800354e:	d900      	bls.n	8003552 <__ssputs_r+0x72>
 8003550:	463e      	mov	r6, r7
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	4632      	mov	r2, r6
 8003556:	4641      	mov	r1, r8
 8003558:	f000 faa8 	bl	8003aac <memmove>
 800355c:	68a3      	ldr	r3, [r4, #8]
 800355e:	1b9b      	subs	r3, r3, r6
 8003560:	60a3      	str	r3, [r4, #8]
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	4433      	add	r3, r6
 8003566:	6023      	str	r3, [r4, #0]
 8003568:	2000      	movs	r0, #0
 800356a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356e:	462a      	mov	r2, r5
 8003570:	f000 fad4 	bl	8003b1c <_realloc_r>
 8003574:	4606      	mov	r6, r0
 8003576:	2800      	cmp	r0, #0
 8003578:	d1e0      	bne.n	800353c <__ssputs_r+0x5c>
 800357a:	6921      	ldr	r1, [r4, #16]
 800357c:	4650      	mov	r0, sl
 800357e:	f7ff feb7 	bl	80032f0 <_free_r>
 8003582:	230c      	movs	r3, #12
 8003584:	f8ca 3000 	str.w	r3, [sl]
 8003588:	89a3      	ldrh	r3, [r4, #12]
 800358a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800358e:	81a3      	strh	r3, [r4, #12]
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	e7e9      	b.n	800356a <__ssputs_r+0x8a>
	...

08003598 <_svfiprintf_r>:
 8003598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359c:	4698      	mov	r8, r3
 800359e:	898b      	ldrh	r3, [r1, #12]
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	b09d      	sub	sp, #116	@ 0x74
 80035a4:	4607      	mov	r7, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	4614      	mov	r4, r2
 80035aa:	d510      	bpl.n	80035ce <_svfiprintf_r+0x36>
 80035ac:	690b      	ldr	r3, [r1, #16]
 80035ae:	b973      	cbnz	r3, 80035ce <_svfiprintf_r+0x36>
 80035b0:	2140      	movs	r1, #64	@ 0x40
 80035b2:	f7ff ff09 	bl	80033c8 <_malloc_r>
 80035b6:	6028      	str	r0, [r5, #0]
 80035b8:	6128      	str	r0, [r5, #16]
 80035ba:	b930      	cbnz	r0, 80035ca <_svfiprintf_r+0x32>
 80035bc:	230c      	movs	r3, #12
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	b01d      	add	sp, #116	@ 0x74
 80035c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ca:	2340      	movs	r3, #64	@ 0x40
 80035cc:	616b      	str	r3, [r5, #20]
 80035ce:	2300      	movs	r3, #0
 80035d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80035d2:	2320      	movs	r3, #32
 80035d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80035dc:	2330      	movs	r3, #48	@ 0x30
 80035de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800377c <_svfiprintf_r+0x1e4>
 80035e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035e6:	f04f 0901 	mov.w	r9, #1
 80035ea:	4623      	mov	r3, r4
 80035ec:	469a      	mov	sl, r3
 80035ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035f2:	b10a      	cbz	r2, 80035f8 <_svfiprintf_r+0x60>
 80035f4:	2a25      	cmp	r2, #37	@ 0x25
 80035f6:	d1f9      	bne.n	80035ec <_svfiprintf_r+0x54>
 80035f8:	ebba 0b04 	subs.w	fp, sl, r4
 80035fc:	d00b      	beq.n	8003616 <_svfiprintf_r+0x7e>
 80035fe:	465b      	mov	r3, fp
 8003600:	4622      	mov	r2, r4
 8003602:	4629      	mov	r1, r5
 8003604:	4638      	mov	r0, r7
 8003606:	f7ff ff6b 	bl	80034e0 <__ssputs_r>
 800360a:	3001      	adds	r0, #1
 800360c:	f000 80a7 	beq.w	800375e <_svfiprintf_r+0x1c6>
 8003610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003612:	445a      	add	r2, fp
 8003614:	9209      	str	r2, [sp, #36]	@ 0x24
 8003616:	f89a 3000 	ldrb.w	r3, [sl]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 809f 	beq.w	800375e <_svfiprintf_r+0x1c6>
 8003620:	2300      	movs	r3, #0
 8003622:	f04f 32ff 	mov.w	r2, #4294967295
 8003626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800362a:	f10a 0a01 	add.w	sl, sl, #1
 800362e:	9304      	str	r3, [sp, #16]
 8003630:	9307      	str	r3, [sp, #28]
 8003632:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003636:	931a      	str	r3, [sp, #104]	@ 0x68
 8003638:	4654      	mov	r4, sl
 800363a:	2205      	movs	r2, #5
 800363c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003640:	484e      	ldr	r0, [pc, #312]	@ (800377c <_svfiprintf_r+0x1e4>)
 8003642:	f7fc fdcd 	bl	80001e0 <memchr>
 8003646:	9a04      	ldr	r2, [sp, #16]
 8003648:	b9d8      	cbnz	r0, 8003682 <_svfiprintf_r+0xea>
 800364a:	06d0      	lsls	r0, r2, #27
 800364c:	bf44      	itt	mi
 800364e:	2320      	movmi	r3, #32
 8003650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003654:	0711      	lsls	r1, r2, #28
 8003656:	bf44      	itt	mi
 8003658:	232b      	movmi	r3, #43	@ 0x2b
 800365a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800365e:	f89a 3000 	ldrb.w	r3, [sl]
 8003662:	2b2a      	cmp	r3, #42	@ 0x2a
 8003664:	d015      	beq.n	8003692 <_svfiprintf_r+0xfa>
 8003666:	9a07      	ldr	r2, [sp, #28]
 8003668:	4654      	mov	r4, sl
 800366a:	2000      	movs	r0, #0
 800366c:	f04f 0c0a 	mov.w	ip, #10
 8003670:	4621      	mov	r1, r4
 8003672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003676:	3b30      	subs	r3, #48	@ 0x30
 8003678:	2b09      	cmp	r3, #9
 800367a:	d94b      	bls.n	8003714 <_svfiprintf_r+0x17c>
 800367c:	b1b0      	cbz	r0, 80036ac <_svfiprintf_r+0x114>
 800367e:	9207      	str	r2, [sp, #28]
 8003680:	e014      	b.n	80036ac <_svfiprintf_r+0x114>
 8003682:	eba0 0308 	sub.w	r3, r0, r8
 8003686:	fa09 f303 	lsl.w	r3, r9, r3
 800368a:	4313      	orrs	r3, r2
 800368c:	9304      	str	r3, [sp, #16]
 800368e:	46a2      	mov	sl, r4
 8003690:	e7d2      	b.n	8003638 <_svfiprintf_r+0xa0>
 8003692:	9b03      	ldr	r3, [sp, #12]
 8003694:	1d19      	adds	r1, r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	9103      	str	r1, [sp, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	bfbb      	ittet	lt
 800369e:	425b      	neglt	r3, r3
 80036a0:	f042 0202 	orrlt.w	r2, r2, #2
 80036a4:	9307      	strge	r3, [sp, #28]
 80036a6:	9307      	strlt	r3, [sp, #28]
 80036a8:	bfb8      	it	lt
 80036aa:	9204      	strlt	r2, [sp, #16]
 80036ac:	7823      	ldrb	r3, [r4, #0]
 80036ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80036b0:	d10a      	bne.n	80036c8 <_svfiprintf_r+0x130>
 80036b2:	7863      	ldrb	r3, [r4, #1]
 80036b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80036b6:	d132      	bne.n	800371e <_svfiprintf_r+0x186>
 80036b8:	9b03      	ldr	r3, [sp, #12]
 80036ba:	1d1a      	adds	r2, r3, #4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	9203      	str	r2, [sp, #12]
 80036c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036c4:	3402      	adds	r4, #2
 80036c6:	9305      	str	r3, [sp, #20]
 80036c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800378c <_svfiprintf_r+0x1f4>
 80036cc:	7821      	ldrb	r1, [r4, #0]
 80036ce:	2203      	movs	r2, #3
 80036d0:	4650      	mov	r0, sl
 80036d2:	f7fc fd85 	bl	80001e0 <memchr>
 80036d6:	b138      	cbz	r0, 80036e8 <_svfiprintf_r+0x150>
 80036d8:	9b04      	ldr	r3, [sp, #16]
 80036da:	eba0 000a 	sub.w	r0, r0, sl
 80036de:	2240      	movs	r2, #64	@ 0x40
 80036e0:	4082      	lsls	r2, r0
 80036e2:	4313      	orrs	r3, r2
 80036e4:	3401      	adds	r4, #1
 80036e6:	9304      	str	r3, [sp, #16]
 80036e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ec:	4824      	ldr	r0, [pc, #144]	@ (8003780 <_svfiprintf_r+0x1e8>)
 80036ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036f2:	2206      	movs	r2, #6
 80036f4:	f7fc fd74 	bl	80001e0 <memchr>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d036      	beq.n	800376a <_svfiprintf_r+0x1d2>
 80036fc:	4b21      	ldr	r3, [pc, #132]	@ (8003784 <_svfiprintf_r+0x1ec>)
 80036fe:	bb1b      	cbnz	r3, 8003748 <_svfiprintf_r+0x1b0>
 8003700:	9b03      	ldr	r3, [sp, #12]
 8003702:	3307      	adds	r3, #7
 8003704:	f023 0307 	bic.w	r3, r3, #7
 8003708:	3308      	adds	r3, #8
 800370a:	9303      	str	r3, [sp, #12]
 800370c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800370e:	4433      	add	r3, r6
 8003710:	9309      	str	r3, [sp, #36]	@ 0x24
 8003712:	e76a      	b.n	80035ea <_svfiprintf_r+0x52>
 8003714:	fb0c 3202 	mla	r2, ip, r2, r3
 8003718:	460c      	mov	r4, r1
 800371a:	2001      	movs	r0, #1
 800371c:	e7a8      	b.n	8003670 <_svfiprintf_r+0xd8>
 800371e:	2300      	movs	r3, #0
 8003720:	3401      	adds	r4, #1
 8003722:	9305      	str	r3, [sp, #20]
 8003724:	4619      	mov	r1, r3
 8003726:	f04f 0c0a 	mov.w	ip, #10
 800372a:	4620      	mov	r0, r4
 800372c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003730:	3a30      	subs	r2, #48	@ 0x30
 8003732:	2a09      	cmp	r2, #9
 8003734:	d903      	bls.n	800373e <_svfiprintf_r+0x1a6>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0c6      	beq.n	80036c8 <_svfiprintf_r+0x130>
 800373a:	9105      	str	r1, [sp, #20]
 800373c:	e7c4      	b.n	80036c8 <_svfiprintf_r+0x130>
 800373e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003742:	4604      	mov	r4, r0
 8003744:	2301      	movs	r3, #1
 8003746:	e7f0      	b.n	800372a <_svfiprintf_r+0x192>
 8003748:	ab03      	add	r3, sp, #12
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	462a      	mov	r2, r5
 800374e:	4b0e      	ldr	r3, [pc, #56]	@ (8003788 <_svfiprintf_r+0x1f0>)
 8003750:	a904      	add	r1, sp, #16
 8003752:	4638      	mov	r0, r7
 8003754:	f3af 8000 	nop.w
 8003758:	1c42      	adds	r2, r0, #1
 800375a:	4606      	mov	r6, r0
 800375c:	d1d6      	bne.n	800370c <_svfiprintf_r+0x174>
 800375e:	89ab      	ldrh	r3, [r5, #12]
 8003760:	065b      	lsls	r3, r3, #25
 8003762:	f53f af2d 	bmi.w	80035c0 <_svfiprintf_r+0x28>
 8003766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003768:	e72c      	b.n	80035c4 <_svfiprintf_r+0x2c>
 800376a:	ab03      	add	r3, sp, #12
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	462a      	mov	r2, r5
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <_svfiprintf_r+0x1f0>)
 8003772:	a904      	add	r1, sp, #16
 8003774:	4638      	mov	r0, r7
 8003776:	f000 f879 	bl	800386c <_printf_i>
 800377a:	e7ed      	b.n	8003758 <_svfiprintf_r+0x1c0>
 800377c:	08003dcc 	.word	0x08003dcc
 8003780:	08003dd6 	.word	0x08003dd6
 8003784:	00000000 	.word	0x00000000
 8003788:	080034e1 	.word	0x080034e1
 800378c:	08003dd2 	.word	0x08003dd2

08003790 <_printf_common>:
 8003790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003794:	4616      	mov	r6, r2
 8003796:	4698      	mov	r8, r3
 8003798:	688a      	ldr	r2, [r1, #8]
 800379a:	690b      	ldr	r3, [r1, #16]
 800379c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037a0:	4293      	cmp	r3, r2
 80037a2:	bfb8      	it	lt
 80037a4:	4613      	movlt	r3, r2
 80037a6:	6033      	str	r3, [r6, #0]
 80037a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037ac:	4607      	mov	r7, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	b10a      	cbz	r2, 80037b6 <_printf_common+0x26>
 80037b2:	3301      	adds	r3, #1
 80037b4:	6033      	str	r3, [r6, #0]
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	0699      	lsls	r1, r3, #26
 80037ba:	bf42      	ittt	mi
 80037bc:	6833      	ldrmi	r3, [r6, #0]
 80037be:	3302      	addmi	r3, #2
 80037c0:	6033      	strmi	r3, [r6, #0]
 80037c2:	6825      	ldr	r5, [r4, #0]
 80037c4:	f015 0506 	ands.w	r5, r5, #6
 80037c8:	d106      	bne.n	80037d8 <_printf_common+0x48>
 80037ca:	f104 0a19 	add.w	sl, r4, #25
 80037ce:	68e3      	ldr	r3, [r4, #12]
 80037d0:	6832      	ldr	r2, [r6, #0]
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	42ab      	cmp	r3, r5
 80037d6:	dc26      	bgt.n	8003826 <_printf_common+0x96>
 80037d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037dc:	6822      	ldr	r2, [r4, #0]
 80037de:	3b00      	subs	r3, #0
 80037e0:	bf18      	it	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	0692      	lsls	r2, r2, #26
 80037e6:	d42b      	bmi.n	8003840 <_printf_common+0xb0>
 80037e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037ec:	4641      	mov	r1, r8
 80037ee:	4638      	mov	r0, r7
 80037f0:	47c8      	blx	r9
 80037f2:	3001      	adds	r0, #1
 80037f4:	d01e      	beq.n	8003834 <_printf_common+0xa4>
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	6922      	ldr	r2, [r4, #16]
 80037fa:	f003 0306 	and.w	r3, r3, #6
 80037fe:	2b04      	cmp	r3, #4
 8003800:	bf02      	ittt	eq
 8003802:	68e5      	ldreq	r5, [r4, #12]
 8003804:	6833      	ldreq	r3, [r6, #0]
 8003806:	1aed      	subeq	r5, r5, r3
 8003808:	68a3      	ldr	r3, [r4, #8]
 800380a:	bf0c      	ite	eq
 800380c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003810:	2500      	movne	r5, #0
 8003812:	4293      	cmp	r3, r2
 8003814:	bfc4      	itt	gt
 8003816:	1a9b      	subgt	r3, r3, r2
 8003818:	18ed      	addgt	r5, r5, r3
 800381a:	2600      	movs	r6, #0
 800381c:	341a      	adds	r4, #26
 800381e:	42b5      	cmp	r5, r6
 8003820:	d11a      	bne.n	8003858 <_printf_common+0xc8>
 8003822:	2000      	movs	r0, #0
 8003824:	e008      	b.n	8003838 <_printf_common+0xa8>
 8003826:	2301      	movs	r3, #1
 8003828:	4652      	mov	r2, sl
 800382a:	4641      	mov	r1, r8
 800382c:	4638      	mov	r0, r7
 800382e:	47c8      	blx	r9
 8003830:	3001      	adds	r0, #1
 8003832:	d103      	bne.n	800383c <_printf_common+0xac>
 8003834:	f04f 30ff 	mov.w	r0, #4294967295
 8003838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800383c:	3501      	adds	r5, #1
 800383e:	e7c6      	b.n	80037ce <_printf_common+0x3e>
 8003840:	18e1      	adds	r1, r4, r3
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	2030      	movs	r0, #48	@ 0x30
 8003846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800384a:	4422      	add	r2, r4
 800384c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003854:	3302      	adds	r3, #2
 8003856:	e7c7      	b.n	80037e8 <_printf_common+0x58>
 8003858:	2301      	movs	r3, #1
 800385a:	4622      	mov	r2, r4
 800385c:	4641      	mov	r1, r8
 800385e:	4638      	mov	r0, r7
 8003860:	47c8      	blx	r9
 8003862:	3001      	adds	r0, #1
 8003864:	d0e6      	beq.n	8003834 <_printf_common+0xa4>
 8003866:	3601      	adds	r6, #1
 8003868:	e7d9      	b.n	800381e <_printf_common+0x8e>
	...

0800386c <_printf_i>:
 800386c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003870:	7e0f      	ldrb	r7, [r1, #24]
 8003872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003874:	2f78      	cmp	r7, #120	@ 0x78
 8003876:	4691      	mov	r9, r2
 8003878:	4680      	mov	r8, r0
 800387a:	460c      	mov	r4, r1
 800387c:	469a      	mov	sl, r3
 800387e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003882:	d807      	bhi.n	8003894 <_printf_i+0x28>
 8003884:	2f62      	cmp	r7, #98	@ 0x62
 8003886:	d80a      	bhi.n	800389e <_printf_i+0x32>
 8003888:	2f00      	cmp	r7, #0
 800388a:	f000 80d2 	beq.w	8003a32 <_printf_i+0x1c6>
 800388e:	2f58      	cmp	r7, #88	@ 0x58
 8003890:	f000 80b9 	beq.w	8003a06 <_printf_i+0x19a>
 8003894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800389c:	e03a      	b.n	8003914 <_printf_i+0xa8>
 800389e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038a2:	2b15      	cmp	r3, #21
 80038a4:	d8f6      	bhi.n	8003894 <_printf_i+0x28>
 80038a6:	a101      	add	r1, pc, #4	@ (adr r1, 80038ac <_printf_i+0x40>)
 80038a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038ac:	08003905 	.word	0x08003905
 80038b0:	08003919 	.word	0x08003919
 80038b4:	08003895 	.word	0x08003895
 80038b8:	08003895 	.word	0x08003895
 80038bc:	08003895 	.word	0x08003895
 80038c0:	08003895 	.word	0x08003895
 80038c4:	08003919 	.word	0x08003919
 80038c8:	08003895 	.word	0x08003895
 80038cc:	08003895 	.word	0x08003895
 80038d0:	08003895 	.word	0x08003895
 80038d4:	08003895 	.word	0x08003895
 80038d8:	08003a19 	.word	0x08003a19
 80038dc:	08003943 	.word	0x08003943
 80038e0:	080039d3 	.word	0x080039d3
 80038e4:	08003895 	.word	0x08003895
 80038e8:	08003895 	.word	0x08003895
 80038ec:	08003a3b 	.word	0x08003a3b
 80038f0:	08003895 	.word	0x08003895
 80038f4:	08003943 	.word	0x08003943
 80038f8:	08003895 	.word	0x08003895
 80038fc:	08003895 	.word	0x08003895
 8003900:	080039db 	.word	0x080039db
 8003904:	6833      	ldr	r3, [r6, #0]
 8003906:	1d1a      	adds	r2, r3, #4
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6032      	str	r2, [r6, #0]
 800390c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003914:	2301      	movs	r3, #1
 8003916:	e09d      	b.n	8003a54 <_printf_i+0x1e8>
 8003918:	6833      	ldr	r3, [r6, #0]
 800391a:	6820      	ldr	r0, [r4, #0]
 800391c:	1d19      	adds	r1, r3, #4
 800391e:	6031      	str	r1, [r6, #0]
 8003920:	0606      	lsls	r6, r0, #24
 8003922:	d501      	bpl.n	8003928 <_printf_i+0xbc>
 8003924:	681d      	ldr	r5, [r3, #0]
 8003926:	e003      	b.n	8003930 <_printf_i+0xc4>
 8003928:	0645      	lsls	r5, r0, #25
 800392a:	d5fb      	bpl.n	8003924 <_printf_i+0xb8>
 800392c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003930:	2d00      	cmp	r5, #0
 8003932:	da03      	bge.n	800393c <_printf_i+0xd0>
 8003934:	232d      	movs	r3, #45	@ 0x2d
 8003936:	426d      	negs	r5, r5
 8003938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800393c:	4859      	ldr	r0, [pc, #356]	@ (8003aa4 <_printf_i+0x238>)
 800393e:	230a      	movs	r3, #10
 8003940:	e011      	b.n	8003966 <_printf_i+0xfa>
 8003942:	6821      	ldr	r1, [r4, #0]
 8003944:	6833      	ldr	r3, [r6, #0]
 8003946:	0608      	lsls	r0, r1, #24
 8003948:	f853 5b04 	ldr.w	r5, [r3], #4
 800394c:	d402      	bmi.n	8003954 <_printf_i+0xe8>
 800394e:	0649      	lsls	r1, r1, #25
 8003950:	bf48      	it	mi
 8003952:	b2ad      	uxthmi	r5, r5
 8003954:	2f6f      	cmp	r7, #111	@ 0x6f
 8003956:	4853      	ldr	r0, [pc, #332]	@ (8003aa4 <_printf_i+0x238>)
 8003958:	6033      	str	r3, [r6, #0]
 800395a:	bf14      	ite	ne
 800395c:	230a      	movne	r3, #10
 800395e:	2308      	moveq	r3, #8
 8003960:	2100      	movs	r1, #0
 8003962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003966:	6866      	ldr	r6, [r4, #4]
 8003968:	60a6      	str	r6, [r4, #8]
 800396a:	2e00      	cmp	r6, #0
 800396c:	bfa2      	ittt	ge
 800396e:	6821      	ldrge	r1, [r4, #0]
 8003970:	f021 0104 	bicge.w	r1, r1, #4
 8003974:	6021      	strge	r1, [r4, #0]
 8003976:	b90d      	cbnz	r5, 800397c <_printf_i+0x110>
 8003978:	2e00      	cmp	r6, #0
 800397a:	d04b      	beq.n	8003a14 <_printf_i+0x1a8>
 800397c:	4616      	mov	r6, r2
 800397e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003982:	fb03 5711 	mls	r7, r3, r1, r5
 8003986:	5dc7      	ldrb	r7, [r0, r7]
 8003988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800398c:	462f      	mov	r7, r5
 800398e:	42bb      	cmp	r3, r7
 8003990:	460d      	mov	r5, r1
 8003992:	d9f4      	bls.n	800397e <_printf_i+0x112>
 8003994:	2b08      	cmp	r3, #8
 8003996:	d10b      	bne.n	80039b0 <_printf_i+0x144>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	07df      	lsls	r7, r3, #31
 800399c:	d508      	bpl.n	80039b0 <_printf_i+0x144>
 800399e:	6923      	ldr	r3, [r4, #16]
 80039a0:	6861      	ldr	r1, [r4, #4]
 80039a2:	4299      	cmp	r1, r3
 80039a4:	bfde      	ittt	le
 80039a6:	2330      	movle	r3, #48	@ 0x30
 80039a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039b0:	1b92      	subs	r2, r2, r6
 80039b2:	6122      	str	r2, [r4, #16]
 80039b4:	f8cd a000 	str.w	sl, [sp]
 80039b8:	464b      	mov	r3, r9
 80039ba:	aa03      	add	r2, sp, #12
 80039bc:	4621      	mov	r1, r4
 80039be:	4640      	mov	r0, r8
 80039c0:	f7ff fee6 	bl	8003790 <_printf_common>
 80039c4:	3001      	adds	r0, #1
 80039c6:	d14a      	bne.n	8003a5e <_printf_i+0x1f2>
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	b004      	add	sp, #16
 80039ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	f043 0320 	orr.w	r3, r3, #32
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	4833      	ldr	r0, [pc, #204]	@ (8003aa8 <_printf_i+0x23c>)
 80039dc:	2778      	movs	r7, #120	@ 0x78
 80039de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	6831      	ldr	r1, [r6, #0]
 80039e6:	061f      	lsls	r7, r3, #24
 80039e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80039ec:	d402      	bmi.n	80039f4 <_printf_i+0x188>
 80039ee:	065f      	lsls	r7, r3, #25
 80039f0:	bf48      	it	mi
 80039f2:	b2ad      	uxthmi	r5, r5
 80039f4:	6031      	str	r1, [r6, #0]
 80039f6:	07d9      	lsls	r1, r3, #31
 80039f8:	bf44      	itt	mi
 80039fa:	f043 0320 	orrmi.w	r3, r3, #32
 80039fe:	6023      	strmi	r3, [r4, #0]
 8003a00:	b11d      	cbz	r5, 8003a0a <_printf_i+0x19e>
 8003a02:	2310      	movs	r3, #16
 8003a04:	e7ac      	b.n	8003960 <_printf_i+0xf4>
 8003a06:	4827      	ldr	r0, [pc, #156]	@ (8003aa4 <_printf_i+0x238>)
 8003a08:	e7e9      	b.n	80039de <_printf_i+0x172>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	f023 0320 	bic.w	r3, r3, #32
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	e7f6      	b.n	8003a02 <_printf_i+0x196>
 8003a14:	4616      	mov	r6, r2
 8003a16:	e7bd      	b.n	8003994 <_printf_i+0x128>
 8003a18:	6833      	ldr	r3, [r6, #0]
 8003a1a:	6825      	ldr	r5, [r4, #0]
 8003a1c:	6961      	ldr	r1, [r4, #20]
 8003a1e:	1d18      	adds	r0, r3, #4
 8003a20:	6030      	str	r0, [r6, #0]
 8003a22:	062e      	lsls	r6, r5, #24
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	d501      	bpl.n	8003a2c <_printf_i+0x1c0>
 8003a28:	6019      	str	r1, [r3, #0]
 8003a2a:	e002      	b.n	8003a32 <_printf_i+0x1c6>
 8003a2c:	0668      	lsls	r0, r5, #25
 8003a2e:	d5fb      	bpl.n	8003a28 <_printf_i+0x1bc>
 8003a30:	8019      	strh	r1, [r3, #0]
 8003a32:	2300      	movs	r3, #0
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	4616      	mov	r6, r2
 8003a38:	e7bc      	b.n	80039b4 <_printf_i+0x148>
 8003a3a:	6833      	ldr	r3, [r6, #0]
 8003a3c:	1d1a      	adds	r2, r3, #4
 8003a3e:	6032      	str	r2, [r6, #0]
 8003a40:	681e      	ldr	r6, [r3, #0]
 8003a42:	6862      	ldr	r2, [r4, #4]
 8003a44:	2100      	movs	r1, #0
 8003a46:	4630      	mov	r0, r6
 8003a48:	f7fc fbca 	bl	80001e0 <memchr>
 8003a4c:	b108      	cbz	r0, 8003a52 <_printf_i+0x1e6>
 8003a4e:	1b80      	subs	r0, r0, r6
 8003a50:	6060      	str	r0, [r4, #4]
 8003a52:	6863      	ldr	r3, [r4, #4]
 8003a54:	6123      	str	r3, [r4, #16]
 8003a56:	2300      	movs	r3, #0
 8003a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a5c:	e7aa      	b.n	80039b4 <_printf_i+0x148>
 8003a5e:	6923      	ldr	r3, [r4, #16]
 8003a60:	4632      	mov	r2, r6
 8003a62:	4649      	mov	r1, r9
 8003a64:	4640      	mov	r0, r8
 8003a66:	47d0      	blx	sl
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d0ad      	beq.n	80039c8 <_printf_i+0x15c>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	079b      	lsls	r3, r3, #30
 8003a70:	d413      	bmi.n	8003a9a <_printf_i+0x22e>
 8003a72:	68e0      	ldr	r0, [r4, #12]
 8003a74:	9b03      	ldr	r3, [sp, #12]
 8003a76:	4298      	cmp	r0, r3
 8003a78:	bfb8      	it	lt
 8003a7a:	4618      	movlt	r0, r3
 8003a7c:	e7a6      	b.n	80039cc <_printf_i+0x160>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	4632      	mov	r2, r6
 8003a82:	4649      	mov	r1, r9
 8003a84:	4640      	mov	r0, r8
 8003a86:	47d0      	blx	sl
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d09d      	beq.n	80039c8 <_printf_i+0x15c>
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	68e3      	ldr	r3, [r4, #12]
 8003a90:	9903      	ldr	r1, [sp, #12]
 8003a92:	1a5b      	subs	r3, r3, r1
 8003a94:	42ab      	cmp	r3, r5
 8003a96:	dcf2      	bgt.n	8003a7e <_printf_i+0x212>
 8003a98:	e7eb      	b.n	8003a72 <_printf_i+0x206>
 8003a9a:	2500      	movs	r5, #0
 8003a9c:	f104 0619 	add.w	r6, r4, #25
 8003aa0:	e7f5      	b.n	8003a8e <_printf_i+0x222>
 8003aa2:	bf00      	nop
 8003aa4:	08003ddd 	.word	0x08003ddd
 8003aa8:	08003dee 	.word	0x08003dee

08003aac <memmove>:
 8003aac:	4288      	cmp	r0, r1
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	eb01 0402 	add.w	r4, r1, r2
 8003ab4:	d902      	bls.n	8003abc <memmove+0x10>
 8003ab6:	4284      	cmp	r4, r0
 8003ab8:	4623      	mov	r3, r4
 8003aba:	d807      	bhi.n	8003acc <memmove+0x20>
 8003abc:	1e43      	subs	r3, r0, #1
 8003abe:	42a1      	cmp	r1, r4
 8003ac0:	d008      	beq.n	8003ad4 <memmove+0x28>
 8003ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aca:	e7f8      	b.n	8003abe <memmove+0x12>
 8003acc:	4402      	add	r2, r0
 8003ace:	4601      	mov	r1, r0
 8003ad0:	428a      	cmp	r2, r1
 8003ad2:	d100      	bne.n	8003ad6 <memmove+0x2a>
 8003ad4:	bd10      	pop	{r4, pc}
 8003ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ade:	e7f7      	b.n	8003ad0 <memmove+0x24>

08003ae0 <_sbrk_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	4d06      	ldr	r5, [pc, #24]	@ (8003afc <_sbrk_r+0x1c>)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	4608      	mov	r0, r1
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	f7fd f962 	bl	8000db4 <_sbrk>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_sbrk_r+0x1a>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_sbrk_r+0x1a>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	200002b8 	.word	0x200002b8

08003b00 <memcpy>:
 8003b00:	440a      	add	r2, r1
 8003b02:	4291      	cmp	r1, r2
 8003b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b08:	d100      	bne.n	8003b0c <memcpy+0xc>
 8003b0a:	4770      	bx	lr
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b16:	4291      	cmp	r1, r2
 8003b18:	d1f9      	bne.n	8003b0e <memcpy+0xe>
 8003b1a:	bd10      	pop	{r4, pc}

08003b1c <_realloc_r>:
 8003b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b20:	4680      	mov	r8, r0
 8003b22:	4615      	mov	r5, r2
 8003b24:	460c      	mov	r4, r1
 8003b26:	b921      	cbnz	r1, 8003b32 <_realloc_r+0x16>
 8003b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	f7ff bc4b 	b.w	80033c8 <_malloc_r>
 8003b32:	b92a      	cbnz	r2, 8003b40 <_realloc_r+0x24>
 8003b34:	f7ff fbdc 	bl	80032f0 <_free_r>
 8003b38:	2400      	movs	r4, #0
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b40:	f000 f81a 	bl	8003b78 <_malloc_usable_size_r>
 8003b44:	4285      	cmp	r5, r0
 8003b46:	4606      	mov	r6, r0
 8003b48:	d802      	bhi.n	8003b50 <_realloc_r+0x34>
 8003b4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b4e:	d8f4      	bhi.n	8003b3a <_realloc_r+0x1e>
 8003b50:	4629      	mov	r1, r5
 8003b52:	4640      	mov	r0, r8
 8003b54:	f7ff fc38 	bl	80033c8 <_malloc_r>
 8003b58:	4607      	mov	r7, r0
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	d0ec      	beq.n	8003b38 <_realloc_r+0x1c>
 8003b5e:	42b5      	cmp	r5, r6
 8003b60:	462a      	mov	r2, r5
 8003b62:	4621      	mov	r1, r4
 8003b64:	bf28      	it	cs
 8003b66:	4632      	movcs	r2, r6
 8003b68:	f7ff ffca 	bl	8003b00 <memcpy>
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	4640      	mov	r0, r8
 8003b70:	f7ff fbbe 	bl	80032f0 <_free_r>
 8003b74:	463c      	mov	r4, r7
 8003b76:	e7e0      	b.n	8003b3a <_realloc_r+0x1e>

08003b78 <_malloc_usable_size_r>:
 8003b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b7c:	1f18      	subs	r0, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bfbc      	itt	lt
 8003b82:	580b      	ldrlt	r3, [r1, r0]
 8003b84:	18c0      	addlt	r0, r0, r3
 8003b86:	4770      	bx	lr

08003b88 <_init>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	bf00      	nop
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr

08003b94 <_fini>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr
